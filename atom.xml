<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZhOnG</title>
  <subtitle>随缘笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-21T16:59:32.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yqzhong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>web应用架构的思考，前后端分离思想的探索</title>
    <link href="http://yoursite.com/2017/03/20/web_architecture_thought/"/>
    <id>http://yoursite.com/2017/03/20/web_architecture_thought/</id>
    <published>2017-03-20T08:04:00.000Z</published>
    <updated>2017-03-21T16:59:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对架构的感想"><a href="#对架构的感想" class="headerlink" title="对架构的感想"></a>对架构的感想</h2><h3 id="Model-View-Controller"><a href="#Model-View-Controller" class="headerlink" title="Model-View-Controller"></a>Model-View-Controller</h3><p>Model-View-Controller(MVC)架构应该是Web应用中最常用的架构了，整体的架构在此也不做多介绍，网上介绍很多，在这里我只想关注一点就是MVC中controller的作用，除了接收请求，还有一个功能就是视图的选择，View与Controller之间存在过于紧密的联系，与模型层交互的效率也较低，加大了前后端的关联，使得前后端无法完全脱离，独立开发。但是其低耦合、高重用性和高可维护性依旧在Web应用中有着重要的地位。</p>
<h3 id="前端框架的逐渐成熟"><a href="#前端框架的逐渐成熟" class="headerlink" title="前端框架的逐渐成熟"></a>前端框架的逐渐成熟</h3><p>如今的前端框架逐渐成熟，angular、react、backbone等框架已经逐步运用在多个企业中成为主流，对于前后端分离来说，这些框架中最重要的肯定还是提供了<strong><em>前端路由</em></strong>这个功能，通过这个功能，可以通过<strong><em>hash</em></strong>值来根据url跳转到对应的html，换句话来说，就是前端已经能实现跳转逻辑，并且很好的封装进了框架之中，因此，<strong><em>控制逻辑可以不再掌控在后端</em></strong>，也因此实现了前后端的分离。</p>
<p>当然纯原生的js通过ajax获取到相应结果后强制跳转url也可以实现这种前端控制逻辑的情况，但是这种实现可能会导致大量html的存在，而不是像使用<strong><em>前端路由</em></strong>的通过前端模块化实现，总之使用框架的确能方便很多。</p>
<h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h3><p>微服务架构是近来兴起的一种架构，最近项目就用了一个类似的架构，在我的认知中，主要思路是将一个庞大的单体应用通过分解为各个简单的服务，只是单纯的为前端提供各个<strong><em>api</em></strong>，通过http restful定义的接口提供他人服务。这样的好处就是各种终端都可以调用，没有语言、平台的限制，只要定义好数据结构，均能访问。这样能更好的便于分布式的部署使用，也因此逐步成为了一种主流发展趋势，结合上述前端框架可以很容易呈现前后端分离的可行性。</p>
<h2 id="微服务架构＋前端框架实现前后端分离"><a href="#微服务架构＋前端框架实现前后端分离" class="headerlink" title="微服务架构＋前端框架实现前后端分离"></a>微服务架构＋前端框架实现前后端分离</h2><p>最近的项目服务器端使用了微服务架构，技术使用的是<strong><em>Springboot + redis + mybatis</em></strong>，前端使用的<strong><em>Angular</em></strong>框架，通过前端路由实现逻辑控制跳转。</p>
<p>后端服务器端的一个demo请参见<a href="http://yqzhong.info/2017/02/28/spring_boot_hibernate_config/" target="_blank" rel="external">此处</a></p>
<p>其中<code>UserController</code>类就是一个服务，没有视图控制的跳转，前端通过ajax调用，获取相应数据后，跳转到相应界面，前端的部分写法在后续的文章中会提到。</p>
<h2 id="个人理解的微服务与mvc的区别与优缺点"><a href="#个人理解的微服务与mvc的区别与优缺点" class="headerlink" title="个人理解的微服务与mvc的区别与优缺点"></a>个人理解的微服务与mvc的区别与优缺点</h2><h3 id="对外接口的区别"><a href="#对外接口的区别" class="headerlink" title="对外接口的区别"></a>对外接口的区别</h3><p>很显然，大部分微服务，大部分是通过ajax调用，就是一种<strong><em>异步调用</em></strong>，返回的是一个<strong><em>请求的结果</em></strong>，而不一定是页面（当然也可以是页面），当然也可以使用类同步化的方法调用，但是显然，由于没有视图选择的限制，跳转的情况都由前端解决。也就是说，这些服务的调用，在服务器端是没有<strong><em>完整的业务跳转逻辑</em></strong>的，仅仅是一个个方法（服务）组成的一系列api，因此十分方便分布式的部署使用，而对于每个API接口，都尽量最好要有<strong><em>权限的控制</em></strong>，这里我推荐一种实现方式：通过注解实现权限控制，详见<a href="http://yqzhong.info/2017/03/15/spring_annotation_auth/" target="_blank" rel="external">此处</a>。</p>
<p>MVC中的Controller很明显是一个<strong><em>同步化</em></strong>方法，必须等待Controller中的逻辑处理完毕后，等待服务器传回的视图渲染。因此，服务器能够大致掌控<strong><em>用户操作的逻辑</em></strong>，更容易发现业务逻辑上的缺陷，也相应的更安全，有着一个统一的逻辑线，因此难以放在不同的服务器中。</p>
<hr>
<h3 id="session和cookie的问题"><a href="#session和cookie的问题" class="headerlink" title="session和cookie的问题"></a>session和cookie的问题</h3><h5 id="微服务："><a href="#微服务：" class="headerlink" title="微服务："></a>微服务：</h5><p>很显然，微服务为了提供给多平台，十分容易造成<strong><em>每次请求对于服务器端都会生成一个新的session</em></strong>的问题，而不是最初的具有权限的session，这也是由于服务器端没有一个完整的逻辑线的问题，因此，如果要使用<strong><em>session</em></strong>中的信息，一种解决方案是在服务器存用一个表用于存储权限信息，每次登录或获取权限后服务器生成一个独一无二的token，每次用户请求的时候，在请求中回传给服务器这个token（可以在请求的header里)，从而识别出用户是否具有使用该服务的权限。</p>
<p>比较基础的是使用一个全局的<code>Map&lt;String, HttpSession&gt;</code>，key为第一次请求登录或获取权限后的<code>session</code>的id，后面存取的是<code>HttpSession</code>，包括了那次会话的信息，这样做的好处是可以通过一个接口实现<code>HttpSessionListener</code>，每当一个存在Map中的<code>HttpSession</code>被人工销毁或者过期销毁的时候，可以重写session销毁代码删除map中的内容，如以下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</div><div class="line">        HttpSession session = httpSessionEvent.getSession();</div><div class="line">        SessionMap.remove(session);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然方法还有许多种，这里其实更加推荐使用<strong><em>redis</em></strong>存取信息，同样原理也是通过在请求头中带有身份验证的token(session)，在redis中存入用户信息，节省空间和提高效率。只要实现以下两个方法即可:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserSessionStorage</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 从缓存中取出user</div><div class="line">     * <span class="doctag">@param</span> session</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">UserInfo <span class="title">getUser</span><span class="params">(String session)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 向缓存中放user</div><div class="line">     * <span class="doctag">@param</span> session</div><div class="line">     * <span class="doctag">@param</span> id</div><div class="line">     * <span class="doctag">@param</span> identity</div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">putUser</span><span class="params">(String session, <span class="keyword">long</span> id, String identity)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>redis</code>的方法配置网上也讲的很多，比较简单，这里我们不再赘述，在之后的项目中，可以直接展示给大家。</p>
<h5 id="MVC："><a href="#MVC：" class="headerlink" title="MVC："></a>MVC：</h5><p>很显然，mvc由于整个逻辑线都在服务器端，因此可以与用户端实现一种长链接，这也意味着整个用户的<code>session</code>只有一个，也就是说，可以将很多信息直接存在session中，服务器能正确识别session和其中的权限内容。</p>
<hr>
<h3 id="开发场景"><a href="#开发场景" class="headerlink" title="开发场景"></a>开发场景</h3><p>根据以上，我们可以发现MVC开发必须紧密联系前后端开发人员，而微服务则只需要开发人员定义好接口，则可以并行开发，这里无疑将职责分离的很清晰，几乎没有耦合。</p>
<p>个人认为MVC更加适合与那些每个用户角色都有着完整逻辑路线的，有着整个请求先后顺序的工程项目，即那些管理信息系统，十分的合适。</p>
<p>微服务则可以提供那些零散的少数逻辑的项目，能够和分布式紧密联系的项目，例如爬虫、分布式数据库请求等，或者那些公开的接口，就是所有人都能访问的那些接口项目，都可以使用微服务，这里感觉微服务和SOA其实很像很像。</p>
<p>但是不得不说当微服务很多的时候，这时候是很难维护的。但接口的大众化是一种趋势，要想提供更好的服务无疑微服务是一种很适合的架构，而对于内部系统，则mvc更加合适。</p>
<p>以上是对经典的mvc架构和现在逐渐流行的微服务架构的一些感悟和思考。</p>
]]></content>
    
    <summary type="html">
    
      本文主要介绍使用web架构设计的一些想法，主要谈谈最近用的比较多的几种web框架：MVC与微服务框架，并谈谈微服务与SOA的情况。前后端分离还是后端控制整个跳转逻辑哪种更靠谱?
    
    </summary>
    
      <category term="Java Web" scheme="http://yoursite.com/categories/Java-Web/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="architecture" scheme="http://yoursite.com/tags/architecture/"/>
    
  </entry>
  
  <entry>
    <title>java 注解，在web项目中使用注解实现权限控制</title>
    <link href="http://yoursite.com/2017/03/15/spring_annotation_auth/"/>
    <id>http://yoursite.com/2017/03/15/spring_annotation_auth/</id>
    <published>2017-03-15T11:24:00.000Z</published>
    <updated>2017-03-16T01:59:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Step-1-java-lang-annotation中部分注解说明"><a href="#Step-1-java-lang-annotation中部分注解说明" class="headerlink" title="Step 1: java.lang.annotation中部分注解说明"></a>Step 1: java.lang.annotation中部分注解说明</h2><h3 id="1-Documented"><a href="#1-Documented" class="headerlink" title="1.  @Documented"></a>1.  @Documented</h3><p>官方的描述是：<em>Indicates that annotations with a type are to be documented by javadoc and similar tools by default.</em></p>
<p>即用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，可以被如javadoc等文档化。Documented是一个标记注解。</p>
<h3 id="2-Inherited"><a href="#2-Inherited" class="headerlink" title="2.  @Inherited"></a>2.  @Inherited</h3><p><em>Indicates that an annotation type is automatically inherited.</em></p>
<p>意思是该注解是可以被继承的。</p>
<h3 id="3-Target"><a href="#3-Target" class="headerlink" title="3.  @Target"></a>3.  @Target</h3><p><em>Indicates the kinds of program element to which an annotation type is applicable.</em></p>
<p>意思为该注解可以被使用的作用范围，主要取值：</p>
<ul>
<li>CONSTRUCTOR:用于描述构造器</li>
<li>FIELD:用于描述域</li>
<li>LOCAL_VARIABLE:用于描述局部变量</li>
<li>METHOD:用于描述方法</li>
<li>PACKAGE:用于描述包</li>
<li>PARAMETER:用于描述参数</li>
<li>TYPE:用于描述类、接口或enum</li>
</ul>
<h3 id="4-Retention"><a href="#4-Retention" class="headerlink" title="4. @Retention"></a>4. @Retention</h3><p><em>Indicates how long annotations with the annotated type are to be retained.</em></p>
<p>意思是该注解的保留有效时间范围。</p>
<p>取值：</p>
<ul>
<li>SOURCE:在源文件中有效（即源文件保留）</li>
<li>CLASS:在class文件中有效（即class保留）</li>
<li>RUNTIME:在运行时有效（即运行时保留）</li>
</ul>
<h2 id="Step-2-自定义注解"><a href="#Step-2-自定义注解" class="headerlink" title="Step 2: 自定义注解"></a>Step 2: 自定义注解</h2><p>自定义注解与创建class/interface等类似，通过<code>@interface</code>来实现，在注解名上方可以通过<strong>Step 1</strong>中介绍的4个注解，来声明自定义注解的作用域，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Target;</div><div class="line"></div><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Auth &#123;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">level</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">role</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span>[] roles() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体使用方式下方会继续描述。</p>
<h2 id="Step-3-了解拦截器-Interceptor"><a href="#Step-3-了解拦截器-Interceptor" class="headerlink" title="Step 3: 了解拦截器(Interceptor)"></a>Step 3: 了解拦截器(Interceptor)</h2><p>我们都知道当客户端（浏览器）发送一个请求(request)给服务器端，服务器端会根据请求url来访问相关方法，然后返回相关数据，发出一个响应(response)给客户端，而拦截器的作用则可以在request访问方法前对与request做出相关处理，或对于response做出相关处理。因此对于是否能访问request中的方法，可以通过拦截器拦截非法的请求。</p>
<h3 id="HandlerInterceptor"><a href="#HandlerInterceptor" class="headerlink" title="HandlerInterceptor"></a>HandlerInterceptor</h3><p>拦截器一般需要实现HandlerInterceptor这个接口，这个接口一共三个方法：</p>
<ul>
<li><p>boolean preHandle(HttpServletRequest var1, HttpServletResponse var2, Object var3) throws Exception;</p>
</li>
<li><p>void postHandle(HttpServletRequest var1, HttpServletResponse var2, Object var3, ModelAndView var4) throws Exception;</p>
</li>
<li><p>void afterCompletion(HttpServletRequest var1, HttpServletResponse var2, Object var3, Exception var4) throws Exception;</p>
</li>
</ul>
<p><code>preHandle</code>方法是预处理，就是request访问方法前进行的处理，若返回false则直接拦截该请求，如果返回true则继续访问request请求的方法。</p>
<p><code>postHandle</code>方法是后处理，访问完请求的方法后进行的处理</p>
<p><code>afterCompletion</code>方法是整个请求处理完毕回调方法，就是在视图渲染完毕时回调，类似于try-catch-finally中的finally，但仅调用处理器执行链中preHandle返回true的拦截器的afterCompletion</p>
<p>因此如果要实现权限控制，主要就是实现<code>preHandle</code>方法。</p>
<h2 id="Step-4-结合自定义注解和拦截器，实现对于每个方法实现权限控制"><a href="#Step-4-结合自定义注解和拦截器，实现对于每个方法实现权限控制" class="headerlink" title="Step 4: 结合自定义注解和拦截器，实现对于每个方法实现权限控制"></a>Step 4: 结合自定义注解和拦截器，实现对于每个方法实现权限控制</h2><h3 id="0-简单需求"><a href="#0-简单需求" class="headerlink" title="0. 简单需求"></a>0. 简单需求</h3><p>假设用户有两种身份，user &amp; manager，某些方法必须登录才能访问，某些方法必须是user才能访问</p>
<h3 id="1-定义权限"><a href="#1-定义权限" class="headerlink" title="1. 定义权限"></a>1. 定义权限</h3><p>如果我们定义了两个权限级别，一个是必须登录后才能访问(LOGGED)，另一个则是不进行拦截，权限为(ALL)，如下为代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 17/3/1.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> AuthLevel &#123;</div><div class="line"></div><div class="line">    LOGGED(<span class="number">0</span>),</div><div class="line">    ALL(Integer.MAX_VALUE);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> level;</div><div class="line"></div><div class="line">    AuthLevel(<span class="keyword">int</span> level) &#123;</div><div class="line">        <span class="keyword">this</span>.level = level;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLevel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> level;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-用户身份"><a href="#2-用户身份" class="headerlink" title="2. 用户身份"></a>2. 用户身份</h3><p>我们定义一个用户类型的类，用于定义用户类型，以下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 17/3/1.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleType</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> USER_ROLE_ID = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MANAGER_ROLE_ID = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER_ROLE_STR = <span class="string">"user"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MANAGER_ROLE_STR = <span class="string">"manager"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义一个用户实体类，主要定义了一个<code>Integer</code>类型的<code>role</code>字段代表身份：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 17/2/27.</div><div class="line"> */</div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line">    <span class="keyword">private</span> Integer role;        <span class="comment">// 0=user or 1=manager</span></div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span>(strategy=GenerationType.AUTO)</div><div class="line">    <span class="meta">@Column</span>(name=<span class="string">"id"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name=<span class="string">"username"</span>, nullable = <span class="keyword">false</span>, unique = <span class="keyword">true</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.username = username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name=<span class="string">"password"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name=<span class="string">"role"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getRole</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> role;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRole</span><span class="params">(Integer role)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.role = role;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="自定义注释"><a href="#自定义注释" class="headerlink" title="自定义注释"></a>自定义注释</h3><p>有了以上内容，我们就能定义一个自定义注释，注释里面主要包括拦截的条件，包括权限、用户身份，以下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Target;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 17/3/1.</div><div class="line"> */</div><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Auth &#123;</div><div class="line"></div><div class="line">    <span class="function">AuthLevel <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> AuthLevel.ALL</span>;</div><div class="line"></div><div class="line">    <span class="function">AuthLevel <span class="title">level</span><span class="params">()</span> <span class="keyword">default</span> AuthLevel.ALL</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">role</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span>[] roles() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里<code>value</code>和<code>level</code>类似都是是否触发拦截的前提条件，而<code>roles</code>和<code>role</code>则是在前提条件下对用户身份的拦截条件，通过<code>@Target</code>可以发现该注释是用于方法的，<code>@Retention</code>可以发现执行时也存在。下面从拦截器出发来看注解的使用。</p>
<h3 id="定义拦截器"><a href="#定义拦截器" class="headerlink" title="定义拦截器"></a>定义拦截器</h3><p><strong><em>我们假定用户登录后，会将用户信息存入session(当然使用redis等缓存技术存用户信息，根据sessionid来获取也是一样的）</em></strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">User user = userService.findUser(username, pwd);</div><div class="line">HttpSession session = request.getSession(<span class="keyword">false</span>);</div><div class="line">session.setAttribute(<span class="string">"user"</span>, user);</div></pre></td></tr></table></figure>
<p>这样我们就能定义一个拦截器了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 17/3/1.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> MappingJackson2JsonView jsonView = <span class="keyword">new</span> MappingJackson2JsonView();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">if</span> (request.getMethod().equals(RequestMethod.OPTIONS.name())) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!(handler <span class="keyword">instanceof</span> HandlerMethod)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        HandlerMethod handlerMethod = (HandlerMethod) handler;</div><div class="line">        Method method = handlerMethod.getMethod();</div><div class="line">        Auth auth = method.getAnnotation(Auth.class);</div><div class="line">        <span class="keyword">if</span> (auth == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (auth.value().equals(AuthLevel.ALL)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                HttpSession session = request.getSession(<span class="keyword">false</span>);</div><div class="line">                <span class="keyword">if</span> (session == <span class="keyword">null</span>) &#123;</div><div class="line">                    forbidden(request, response);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    user user = (User)session.getAttribute(<span class="string">"user"</span>);</div><div class="line">                    Integer userRole = user.getRole();</div><div class="line">                    <span class="keyword">if</span>(userRole == <span class="keyword">null</span>) &#123;</div><div class="line">                        forbidden(request, response);</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    List&lt;Integer&gt; allowedRoles = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> role : auth.roles()) &#123;</div><div class="line">                        allowedRoles.add(role);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(allowedRoles.contains(userRole)) &#123;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        accessDenied(request, response);</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">forbidden</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="comment">//        response.addHeader("Access-Control-Allow-Origin", "*");</span></div><div class="line">        jsonView.setUpdateContentLength(<span class="keyword">true</span>);</div><div class="line">        jsonView.render(<span class="keyword">null</span>, request, response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">accessDenied</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="comment">//        response.addHeader("Access-Control-Allow-Origin", "*");</span></div><div class="line">        jsonView.setUpdateContentLength(<span class="keyword">true</span>);</div><div class="line">        jsonView.render(<span class="keyword">null</span>, request, response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>主要关注<code>preHandle</code>方法，其中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">HandlerMethod handlerMethod = (HandlerMethod) handler;</div><div class="line">Method method = handlerMethod.getMethod();</div><div class="line">Auth auth = method.getAnnotation(Auth.class);</div></pre></td></tr></table></figure>
<p>可以获取到请求的方法是否有自定义注解的标记，如果没有，那么直接允许访问方法，如果有，那么需要判断权限。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (auth.value().equals(AuthLevel.ALL)) &#123;</div><div class="line">             <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先判断拦截的前提条件，如果是<code>AuthLevel.ALL</code>则说明所有情况下都可以访问，此时允许访问请求的方法，否则是<code>AuthLevel.LOGGED</code>情况下，则必然是已经登录的情况，这时候，在session中必然存在登录时设置的<code>user</code>属性，即可以通过<code>getAttribute(&quot;user&quot;)</code>来获取用户，通过<strong>用户实体</strong>中的<code>getRole()</code>方法可以获取到用户的身份，进行对比即可。当然可以分的更细一些，如果<code>session</code>不存在，则返回一个<code>forbidden</code>页面，如果存在但不符合权限，则返回一个<code>accessDenied</code>页面。</p>
<h3 id="Spring-boot注册拦截器"><a href="#Spring-boot注册拦截器" class="headerlink" title="Spring boot注册拦截器"></a>Spring boot注册拦截器</h3><p><strong><em>在Spring中配置拦截器可以直接通过xml配置</em></strong>，教程很多在此不赘述，这里也只是简单标记下在<em>Spring boot框架</em>下如何注册拦截器。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 17/3/1.</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableWebMvc</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAppConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</div><div class="line">        registry.addInterceptor(<span class="keyword">new</span> AuthInterceptor()).addPathPatterns(<span class="string">"/**"</span>);</div><div class="line">        <span class="keyword">super</span>.addInterceptors(registry);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用自定义注解的方法"><a href="#使用自定义注解的方法" class="headerlink" title="使用自定义注解的方法"></a>使用自定义注解的方法</h3><p>直接上代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@EnableConfigurationProperties</span></div><div class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserService userService;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/login"</span>, method = RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(@RequestBody LoginDto loginDto,</span></span></div><div class="line">                                     HttpServletRequest request, HttpServletResponse response) <span class="keyword">throws</span> Exception &#123;</div><div class="line">		  <span class="comment">// loginDto包含用户名和密码，service里面只是简单验证用户名密码</span></div><div class="line">        User user = userService.login(loginDto);</div><div class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</div><div class="line">            HttpSession session = request.getSession(<span class="keyword">true</span>);</div><div class="line">            session.setAttribute(<span class="string">"user"</span>, user);</div><div class="line">            session.setAttribute(<span class="string">"role"</span>, role);</div><div class="line">            session.setMaxInactiveInterval(<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Auth</span>(value = AuthLevel.LOGGED, roles = &#123;RoleType.MANAGER_ROLE_ID&#125;)</div><div class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/delete"</span>, method = RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(@RequestBody UserDto userDto,</span></span></div><div class="line">                                     HttpServletRequest request, HttpServletResponse response) <span class="keyword">throws</span> Exception &#123;</div><div class="line">        User user = userService.delete(userDto);</div><div class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Auth</span>(value = AuthLevel.LOGGED, roles = &#123;RoleType.USER_ROLE_ID&#125;)</div><div class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/changePassword"</span>, method = RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">changePassword</span><span class="params">(@RequestBody UserDto userDto,</span></span></div><div class="line">                                     HttpServletRequest request, HttpServletResponse response) <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="keyword">boolean</span> isSuccess = userService.changePassword(userDto);</div><div class="line">        <span class="keyword">return</span> isSuccess;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上，</p>
<ul>
<li>若访问<code>/user/login</code>方法，可以看到没有<code>@Auth</code>这个自定义注解，因此，请求均能访问该方法，</li>
<li><code>/user/delete</code>方法有个前提<code>AuthLevel.LOGGED</code>说明必须要登录后才能看到，<code>roles</code>只包含了管理员的id，因此，该方法必须管理员登录后，才能访问。</li>
<li><code>/user/changePassword</code>方法有个前提是登录，必须用户登录后，才能修改自己的密码。</li>
</ul>
<h2 id="Step-5-总结"><a href="#Step-5-总结" class="headerlink" title="Step 5: 总结"></a>Step 5: 总结</h2><p>自定义注解用法和定义方式均已在上面讲述，具体举了一个权限拦截的例子，但是总体来说，出了请求方面通过注解来拦截，但是这也是不够的，真正的权限拦截必然还需要囊括数据库的权限等方面，只靠拦截器来实现是不够的，当然有了这个例子，可以发现不用在每个方法代码中，重复的来验证身份，也不用写多个拦截器或者定义拦截器的拦截范围，完全通过注解即可实现，注解能极大减少这一块代码的使用量，了解一个还是很不错的～</p>
<p>先写到这吧～</p>
]]></content>
    
    <summary type="html">
    
      自定义注解，注解和拦截器的配合实现权限控制，Springboot 和 Spring中配置拦截器的做法
    
    </summary>
    
      <category term="Java Web" scheme="http://yoursite.com/categories/Java-Web/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="annotation" scheme="http://yoursite.com/tags/annotation/"/>
    
  </entry>
  
  <entry>
    <title>浏览器跨域的问题， spring boot的解决方案</title>
    <link href="http://yoursite.com/2017/03/13/spring_boot_cross_origin/"/>
    <id>http://yoursite.com/2017/03/13/spring_boot_cross_origin/</id>
    <published>2017-03-13T12:35:01.000Z</published>
    <updated>2017-03-13T14:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Step-1：理解跨域"><a href="#Step-1：理解跨域" class="headerlink" title="Step 1：理解跨域"></a>Step 1：理解跨域</h2><h3 id="同源："><a href="#同源：" class="headerlink" title="同源："></a>同源：</h3><p>就是协议相同、域名相同、端口相同的两个网页就是同源的，<strong><em>不同源的网页</em></strong>中Cookie、LocalStorage和IndexDB无法读取、DOM无法获得、Ajax请求不能发送。</p>
<p>有所谓的跨域问题，个人理解是主要是由于浏览器自身的原因，是浏览器拒绝了用户发出的跨域请求，以此来防止信息泄漏。</p>
<p>而服务器端一直是允许跨域的，所以服务器端真正要防止跨域请求，必然会在header或者请求的某个部分加上自身的一些标识，服务器接收到请求的第一步能够识别这个标识后才进行处理才是最保险的做法。</p>
<h3 id="Cookie："><a href="#Cookie：" class="headerlink" title="Cookie："></a>Cookie：</h3><p>Cookie可以理解为一种缓存，同源的网页能够共享，当然，如果一级域名相同，则可以通过设置<code>document.domain</code>相同，且在服务器端设置<code>Set-Cookie: key=value; domain=.xxxx; path=/</code>，也能实现共享cookie。</p>
<h2 id="Step-2-浏览器跨域？服务器端的配置-Spring-boot"><a href="#Step-2-浏览器跨域？服务器端的配置-Spring-boot" class="headerlink" title="Step 2: 浏览器跨域？服务器端的配置(Spring boot)"></a>Step 2: 浏览器跨域？服务器端的配置(Spring boot)</h2><p>上述其实已经说过了，当你使用高级语言（java/python/php等）发送请求的话，服务器端是可以正常访问并返回相应结果的，但当使用浏览器发送请求时，如果服务器端没有特别设置允许跨域，就会出现错误信息：</p>
<p><img src="/images/spring_boot_demo/cross_origin_error.jpg" alt="error_message"></p>
<p>这时候就需要在服务器端设置允许跨域了，具体如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</div><div class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 17/3/10.</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> CorsConfiguration <span class="title">buildConfig</span><span class="params">()</span> </span>&#123;</div><div class="line">        CorsConfiguration corsConfiguration = <span class="keyword">new</span> CorsConfiguration();</div><div class="line">        corsConfiguration.addAllowedOrigin(<span class="string">"*"</span>);</div><div class="line">        corsConfiguration.addAllowedHeader(<span class="string">"*"</span>);</div><div class="line">        corsConfiguration.addAllowedMethod(<span class="string">"*"</span>);</div><div class="line">        <span class="keyword">return</span> corsConfiguration;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</div><div class="line">        source.registerCorsConfiguration(<span class="string">"/**"</span>, buildConfig());</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(source);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然上述<code>addAllowedOrigin()</code>方法可以设置服务器允许的来源域名，<code>addAllowedHeader()</code>方法可以设置服务器允许的头信息，<code>addAllowedMethod()</code>方法可以设置服务器允许的请求方法(GET/POST/DELETE等)</p>
<p><strong><em>或者在拦截器中配置</em></strong>拦截器中配置<code>response.addHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</code>应该也行？</p>
<h2 id="附录：SpringMVC中的配置："><a href="#附录：SpringMVC中的配置：" class="headerlink" title="附录：SpringMVC中的配置："></a>附录：SpringMVC中的配置：</h2><p>使用注解<code>@CrossOrigin(origins = &quot;*&quot;, maxAge = 3600,methods={RequestMethod.POST})</code></p>
<p>或者全局配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</div><div class="line">    </div><div class="line">    registry.addMapping(<span class="string">"/**"</span>).allowedOrigins(<span class="string">"*"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      Spring boot中解决浏览器跨域问题。
    
    </summary>
    
      <category term="Java Web" scheme="http://yoursite.com/categories/Java-Web/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Java Web之Spring boot &amp; hibernate(mysql)</title>
    <link href="http://yoursite.com/2017/02/28/spring_boot_hibernate_config/"/>
    <id>http://yoursite.com/2017/02/28/spring_boot_hibernate_config/</id>
    <published>2017-02-28T08:04:00.000Z</published>
    <updated>2017-02-28T13:51:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Step-1-初步了解Spring-boot"><a href="#Step-1-初步了解Spring-boot" class="headerlink" title="Step 1: 初步了解Spring boot"></a>Step 1: 初步了解Spring boot</h2><p>Spring boot非常类似于Spring, 在我看来应该算是Spring的一种升级版本，主要是可以省略Spring那些繁琐的配置文件(web.xml、spring.xml），而是通过更多的注解，通过自动扫描识别bean，以此来简单的构建一个web应用，极大提高了开发效率。</p>
<h2 id="Step-2-创建简单的maven项目"><a href="#Step-2-创建简单的maven项目" class="headerlink" title="Step 2: 创建简单的maven项目"></a>Step 2: 创建简单的maven项目</h2><p>本次采用模块化设计架构，就是在整个maven项目中，创建多个maven module以此来更好的分离逻辑，初步打算拥有4个模块，web、service、common、model四个模块，其中web为<strong><em>webapp</em></strong><br>类型的maven模块，包含controller等相关信息，其余模块则均为普通的<strong><em>quickstart</em></strong><br>类型的maven模块，其中model模块为数据库表映射模块，service模块为处理逻辑模块，而common模块则用于枚举一些常数或常用方法。</p>
<p>整个project的pom.xml文件如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>server<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>web<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>common<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>model<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>model、service、common模块的pom.xml文件如下，只有<code>&lt;artifactId&gt;&lt;/artifactId&gt;</code>不同，其余都相同，当然仍然可以在每个pom.xml下加入本模块单独使用的maven依赖等，最初版本如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>server<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>model/service/common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p>web模块则是一个<strong><em>webapp</em></strong>的maven模块，因此包含了java、resource、webapp三个文件夹，分别为web项目需要的三个文件夹。web模块的pom.xml如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>server<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>server<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>server<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Step-3-集成hibernate"><a href="#Step-3-集成hibernate" class="headerlink" title="Step 3: 集成hibernate"></a>Step 3: 集成hibernate</h2><h3 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h3><p>需要使用hibernate的话，和spring十分类似，在<strong><em>整个project</em></strong>下的pom.xml中的<code>&lt;dependencies&gt;&lt;/dependencies&gt;</code>标签中添加如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- mysql &amp; hibernate --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.4.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.34<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h3><p>这里与spring就有一些不同了！这里我们只需要在<strong><em>web模块</em></strong>中的<strong><em>resource</em></strong>资源文件夹下创建一个资源文件名为 <code>application.properties</code>，内容如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#DB Configuration:</div><div class="line">spring.datasource.driverClassName = com.mysql.jdbc.Driver</div><div class="line">spring.datasource.url = jdbc:mysql://localhost:3306/demo</div><div class="line">spring.datasource.username = root</div><div class="line">spring.datasource.password = root</div><div class="line"></div><div class="line">#JPA Configuration:</div><div class="line">spring.jpa.database=MySQL</div><div class="line">spring.jpa.show-sql=true</div><div class="line">spring.jpa.generate-ddl=true</div><div class="line">spring.jpa.hibernate.ddl-auto=update</div><div class="line">spring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect</div><div class="line">spring.jpa.hibernate.naming_strategy=org.hibernate.cfg.ImprovedNamingStrategy</div><div class="line">#spring.jpa.database=org.hibernate.dialect.MySQL5InnoDBDialect</div><div class="line">#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MYSQL5Dialect</div></pre></td></tr></table></figure>
<p>其中的具体说明类似spring，在此不再赘述，可以自行更改。</p>
<h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类:"></a>创建实体类:</h3><p>在model模块下，<code>server.model</code>包下创建一个包名为entity, 在entity下创建实体类，这里我们举例<code>User.java</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> server.model.entity;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.persistence.Entity;</div><div class="line"><span class="keyword">import</span> javax.persistence.Id;</div><div class="line"><span class="keyword">import</span> javax.persistence.Table;</div><div class="line"><span class="keyword">import</span> javax.persistence.Column;</div><div class="line"><span class="keyword">import</span> javax.persistence.Entity;</div><div class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</div><div class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 17/2/12.</div><div class="line"> */</div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    <span class="keyword">private</span> String sex;</div><div class="line">    <span class="keyword">private</span> String address;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span>(strategy=GenerationType.AUTO)</div><div class="line">    <span class="meta">@Column</span>(name=<span class="string">"id"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name=<span class="string">"username"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.username = username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name=<span class="string">"sex"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.sex = sex;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Column</span>(name=<span class="string">"adress"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> address;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.address = address;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", username="</span> + username + <span class="string">", sex="</span> + sex + <span class="string">", address="</span> + address + <span class="string">"]"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="hibernate使用方式（DAO-："><a href="#hibernate使用方式（DAO-：" class="headerlink" title="hibernate使用方式（DAO)："></a>hibernate使用方式（DAO)：</h3><p>在Spring boot中，操作实体类最经典的方式就是使用<code>Repository</code>的概念，这个原理将在后续再讲述，这里我们只是介绍如何使用。</p>
<p>在<strong><em>model模块</em></strong>创建包<strong><em>server.model.repository</em></strong>包，并在其中创建一个对应<code>User.java</code>实体类的一个repository<strong><em>接口</em></strong>，名为<code>UserRepository.java</code>,内容如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> server.model.repository;</div><div class="line"></div><div class="line"><span class="keyword">import</span> server.model.entity.User;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</div><div class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.Query;</div><div class="line"><span class="keyword">import</span> org.springframework.data.repository.CrudRepository;</div><div class="line"><span class="keyword">import</span> org.springframework.data.repository.query.Param;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.persistence.Table;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 17/2/12.</div><div class="line"> */</div><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"user"</span>)</div><div class="line"><span class="meta">@Qualifier</span>(<span class="string">"userRepository"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">User</span>,<span class="title">Long</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findOne</span><span class="params">(Long id)</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Query</span>(<span class="string">"select t from User t where t.username=:name"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserByName</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们需要继承<code>CrudRepository</code>类来进行操作，通过<code>@Query</code>/<code>@Update</code>等注解后跟着sql语句来自动实现相关数据库操作，在此不再赘述。</p>
<h2 id="Step-4-使用Spring-boot和Spring的注解进行开发"><a href="#Step-4-使用Spring-boot和Spring的注解进行开发" class="headerlink" title="Step 4: 使用Spring boot和Spring的注解进行开发"></a>Step 4: 使用Spring boot和Spring的注解进行开发</h2><h3 id="创建程序入口："><a href="#创建程序入口：" class="headerlink" title="创建程序入口："></a>创建程序入口：</h3><p>在<strong><em>web模块</em></strong> 下 <strong><em>server.web</em></strong>包下创建一个入口包，这里我们叫做<code>init</code>包，创建入口类<code>Application</code>,内容如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> server.web.init;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.orm.jpa.EntityScan;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.web.support.SpringBootServletInitializer;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 17/2/12.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"server"</span>)</div><div class="line"><span class="meta">@EnableAutoConfiguration</span></div><div class="line"><span class="meta">@EntityScan</span>(basePackages=<span class="string">"server.model.entity"</span>)</div><div class="line"><span class="meta">@EnableJpaRepositories</span>(basePackages = <span class="string">"server.model.repository"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication app = <span class="keyword">new</span> SpringApplication(Application.class);</div><div class="line">        app.run(args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> application.sources(Application.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于我们需要打包成war包，因此必须通知容器web的入口在哪，正如spring中在web.xml中配置入口那样，在Spring boot中，我们只需要写一个类，用于继承<code>SpringBootServletInitializer</code>类，并在上方注释每个相应的组件应该扫描的包的位置，例如扫描整个组件的包为<code>@ComponentScan(basePackages=&quot;server&quot;)</code>,即在server这个包下开始扫描（这样就能扫描出所有的controller等组件），扫描实体类<code>@EntityScan(basePackages=&quot;server.model.entity&quot;)</code>即在<code>server.model.entity</code>下有所有的实体类，<code>@EnableJpaRepositories(basePackages = &quot;server.model.repository&quot;)</code>指在这个包下找所有的数据库操作接口，另外需要重写<code>configure(SpringApplicationBuilder application)</code>方法。形式比较固定。</p>
<h3 id="写一个Controller进行测试"><a href="#写一个Controller进行测试" class="headerlink" title="写一个Controller进行测试"></a>写一个Controller进行测试</h3><p>在<strong><em>web模块</em></strong>下<code>server.web</code>包下创建包为<code>controller</code>，并创建类<code>UserController.java</code>进行测试，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> server.web.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> server.model.entity.User;</div><div class="line"><span class="keyword">import</span> server.model.repository.UserRepository;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 17/2/12.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@EnableConfigurationProperties</span></div><div class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserRepository userRepository;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(path=<span class="string">"/getUserById"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(@RequestParam Long id)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"hello user"</span>);</div><div class="line">        User u = userRepository.findOne(id);</div><div class="line">        System.out.println(userRepository);</div><div class="line">        System.out.println(u);</div><div class="line">        <span class="keyword">return</span> u;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(path=<span class="string">"/findUserByName"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserByName</span><span class="params">(@RequestParam String name)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"hello user"</span>);</div><div class="line">        User u = userRepository.findUserByName(name);</div><div class="line">        System.out.println(u);</div><div class="line">        <span class="keyword">return</span> u;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的注解大部分与Spring中的注解相同，<code>@EnableConfigurationProperties</code>能够使用配置信息，这里应该可以不加？</p>
<p>至此整个基本的demo就搭建完毕了。</p>
<h2 id="Step-5-打包成war并发布到tomcat"><a href="#Step-5-打包成war并发布到tomcat" class="headerlink" title="Step 5: 打包成war并发布到tomcat"></a>Step 5: 打包成war并发布到tomcat</h2><p>首先要在<strong><em>整个project</em></strong>的<code>pom.xml</code>中的<code>&lt;build&gt;&lt;/build&gt;</code>标签中添加以下xml：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">compilerArgument</span>&gt;</span>-parameters<span class="tag">&lt;/<span class="name">compilerArgument</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/manager/text<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>username<span class="tag">&lt;/<span class="name">username</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>password<span class="tag">&lt;/<span class="name">password</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">path</span>&gt;</span>/$&#123;project.build.finalName&#125;<span class="tag">&lt;/<span class="name">path</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong><em>请修改上述xml配置中的tomcat的用户名和密码！</em></strong></p>
<p>这些配置是用于maven打包和部署到内置tomcat中，</p>
<p>打开命令行进入项目根目录，并执行<code>mvn clean package tomcat7:undeploy tomcat7:deploy-only</code>命令，然后会自动部署到tomcat中，如果打包成功，则在配置的mysql数据库中会自动生成user的表，添加user的记录后，可以打开浏览器，输入：<code>localhost:8080/demo/user/findUserByName?name=zzz</code>，如图所示:</p>
<p><img src="/images/spring_boot_demo/spring_boot_demo_json.png" alt="spring_boot_demo_json"></p>
<p>即为成功！</p>
<p>暂时写道这里～</p>
]]></content>
    
    <summary type="html">
    
      本文主要介绍使用spring boot框架集成hibernate的步骤，并打包成war或直接部署到tomcat。
    
    </summary>
    
      <category term="Java Web" scheme="http://yoursite.com/categories/Java-Web/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>mybatis(ibatis) 对于Springboot的集成</title>
    <link href="http://yoursite.com/2017/02/28/spring_boot_mybatis/"/>
    <id>http://yoursite.com/2017/02/28/spring_boot_mybatis/</id>
    <published>2017-02-28T08:04:00.000Z</published>
    <updated>2017-03-03T07:59:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Step-1-mybatis简介"><a href="#Step-1-mybatis简介" class="headerlink" title="Step 1: mybatis简介"></a>Step 1: mybatis简介</h2><p>MyBatis是支持定制化SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis避免了几乎所有的JDBC代码和手工设置参数以及抽取结果集。MyBatis使用简单的XML或注解来配置和映射基本体，将接口和Java的POJOs(Plain Old Java Objects,普通的Java对象)映射成数据库中的记录。 — from <a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="external">mybatis官网</a></p>
<h3 id="基本原理："><a href="#基本原理：" class="headerlink" title="基本原理："></a>基本原理：</h3><p>mybatis根据XML配置文件创建SqlSessionFactory这个Bean，SqlSessionFactory根据用户的配置来获取一个SqlSession，通过SqlSession直接运行sql语句，从而实现对数据库的读写。</p>
<p>配置信息根据用户的习惯可以放在xml配置文件里，也可以通过在代码中写入注解来配置。</p>
<h3 id="个人理解的优缺点"><a href="#个人理解的优缺点" class="headerlink" title="个人理解的优缺点"></a>个人理解的优缺点</h3><p>很显然mybatis相较于传统的java jdbc还是要实用上不少的，不仅直接实现了数据库－对象的映射，并且提供了xml标签，更好的实现了动态sql的编写。当然这些hibernate同样能够做到，但是，我认为mybatis最重要的一个优点是能够将sql和java代码分离，更方便的管理和编写，架构也可以更加清晰。</p>
<p>但是本质上并没有减少编写代码的工作量，sql语句该写的还是都需要写。</p>
<h2 id="Step-2-集成spring-boot"><a href="#Step-2-集成spring-boot" class="headerlink" title="Step 2: 集成spring boot"></a>Step 2: 集成spring boot</h2><h3 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h3><p>基于上文的<a href="http://yqzhong.info/2017/02/28/spring_boot_hibernate_config/" target="_blank" rel="external">demo项目</a>，我们在此基础上继续添加maven依赖，在<strong><em>整个项目</em></strong>的pom.xml中添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当然用了mybatis后，则不用Repository这种sql与java耦合度高的实现数据库操作的bean了。</p>
<h3 id="配置文件application-properties"><a href="#配置文件application-properties" class="headerlink" title="配置文件application.properties"></a>配置文件application.properties</h3><p>在<strong><em>resource</em></strong>资源文件下的配置文件application.properties中添加以下配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mybatis.type-aliases-package=server.model</div></pre></td></tr></table></figure>
<p>若使用xml的方式写配置信息，则再添加以下配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mybatis.mapper-locations=classpath:/mybatis/*Mapper.xml</div></pre></td></tr></table></figure>
<h3 id="创建Mapper"><a href="#创建Mapper" class="headerlink" title="创建Mapper"></a>创建Mapper</h3><p>在<strong><em>data</em></strong>模块下添加包<code>server.model.mapper</code>,创建接口<code>UserMapper.java</code>,代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> server.model.mapper;</div><div class="line"></div><div class="line"><span class="keyword">import</span> server.model.entity.User;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Result;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Results;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</div><div class="line"><span class="keyword">import</span> org.springframework.data.repository.query.Param;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 17/2/22.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="meta">@Mapper</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Long id)</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByName</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在interface上面通过注解<code>@Mapper</code>通知此其他此接口是一个可自动诸如的bean。</p>
<p>在项目启动的类<code>Application.java</code>中，添加扫描Mapper的注解，具体如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> server.web.init;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.orm.jpa.EntityScan;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.web.support.SpringBootServletInitializer;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 17/2/12.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"server"</span>)</div><div class="line"><span class="meta">@EnableAutoConfiguration</span></div><div class="line"><span class="meta">@EntityScan</span>(basePackages=<span class="string">"server.model.entity"</span>)</div><div class="line"><span class="meta">@EnableJpaRepositories</span>(basePackages = <span class="string">"server.model.repository"</span>)</div><div class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"server.model.mapper"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication app = <span class="keyword">new</span> SpringApplication(Application.class);</div><div class="line">        app.run(args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> application.sources(Application.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>即通过<code>@MapperScan(basePackages = &quot;server.model.mapper&quot;)</code>来通知扫描路径，当然如果<code>Application.java</code>所在的路径是在<code>Mapper</code>所在包的上层，则可以省略后面的路径配置。</p>
<p>下面我们来看是用mybatis的两种方式：</p>
<h3 id="第一种方式：通过注解"><a href="#第一种方式：通过注解" class="headerlink" title="第一种方式：通过注解"></a>第一种方式：通过注解</h3><p>即直接在代码中通过注释来配置，以下为代码，在上方<code>UserMapper.java</code>中方法上方加入以下代码即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Mapper</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Select</span>(<span class="string">"select * from User where id=#&#123;id&#125;"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Long id)</span>;</div><div class="line">	</div><div class="line">    <span class="meta">@Select</span>(<span class="string">"select * from User where username=#&#123;name&#125;"</span>)</div><div class="line">    <span class="meta">@Results</span>(value = &#123;<span class="meta">@Result</span>(property = <span class="string">"id"</span>, column = <span class="string">"id"</span>),</div><div class="line">            <span class="meta">@Result</span>(property = <span class="string">"username"</span>, column = <span class="string">"username"</span>),</div><div class="line">            <span class="meta">@Result</span>(property = <span class="string">"sex"</span>, column = <span class="string">"sex"</span>),</div><div class="line">            <span class="meta">@Result</span>(property = <span class="string">"address"</span>, column = <span class="string">"address"</span>)</div><div class="line">    &#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByName</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="第二种方式：通过xml配置"><a href="#第二种方式：通过xml配置" class="headerlink" title="第二种方式：通过xml配置"></a>第二种方式：通过xml配置</h3><p>正如以上所说，需要在<code>/resource/application.properties</code>中加入以下配置:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mybatis.mapper-locations=classpath:/mybatis/*Mapper.xml</div></pre></td></tr></table></figure>
<p>然后在<code>/resource</code>资源文件夹下创建文件夹名为<code>mybatis</code>,并在新文件夹下，即<code>/resource/mybatis</code>文件夹下创建<code>userMapper.xml</code>，内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></div><div class="line">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- namespace为dao接口 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"server.model.mapper.UserMapper"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">parameterType</span>=<span class="string">"long"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></div><div class="line">        select * from user where id = #&#123;id&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="使用UserMapper"><a href="#使用UserMapper" class="headerlink" title="使用UserMapper"></a>使用UserMapper</h3><p>只要在测试Controller中直接通过<code>@Autowire</code>注入Mapper即可，以下为测试controller代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> server.web.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> server.model.entity.User;</div><div class="line"><span class="keyword">import</span> server.model.mapper.UserMapper;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 17/2/12.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@EnableConfigurationProperties</span></div><div class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserMapper userMapper;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(path=<span class="string">"/getUserById"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(@RequestParam Long id)</span></span>&#123;</div><div class="line">        User u = userMapper.findUserById(id);</div><div class="line">        <span class="keyword">return</span> u;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>本地测试通过<code>mvn clean package tomcat7:undeploy tomcat7:deploy-only</code>命令即可部署到tomcat7中，输入<code>locahost:8080/demo/user/getUserById?id=1</code>即可看到返回的user信息，如下图：</p>
<p><img src="/images/spring_boot_demo/spring_boot_demo_json.png" alt="spring_boot_demo_json"></p>
<p>至此mybatis已经成功集成进spring boot框架中。</p>
<h2 id="使用MyBatis的感想"><a href="#使用MyBatis的感想" class="headerlink" title="使用MyBatis的感想"></a>使用MyBatis的感想</h2><p>的确可以简化很多数据库的操作，设计思路也是一种亮点，但是用起来感觉xml文件太多的情况下，或者表连接太多的情况下，并没有很容易，甚至有种更繁琐的感觉，包括id的不能重复，没有体现java的重载等，扩展性并没有其他的来的好，但是对于小型项目来说，使用起来的确很舒服。</p>
<h2 id="附录：将mybatis集成进spring框架"><a href="#附录：将mybatis集成进spring框架" class="headerlink" title="附录：将mybatis集成进spring框架"></a>附录：将mybatis集成进spring框架</h2><h3 id="maven依赖-1"><a href="#maven依赖-1" class="headerlink" title="maven依赖"></a>maven依赖</h3><p>同理首先需要进行maven依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">       &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</div><div class="line">       &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</div><div class="line">       &lt;version&gt;3.2.8&lt;/version&gt;</div><div class="line">   &lt;/dependency&gt;</div><div class="line"></div><div class="line">   &lt;dependency&gt;</div><div class="line">       &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</div><div class="line">       &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</div><div class="line">       &lt;version&gt;1.2.2&lt;/version&gt;</div><div class="line">   &lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h3 id="spring配置"><a href="#spring配置" class="headerlink" title="spring配置"></a>spring配置</h3><p>新建一个名为<code>spring-orm.xml</code>与<code>spring-data.xml</code>的配置文件，并在<code>spring.xml</code>中导入这两个配置文件内容。</p>
<p><code>spring-data.xml</code>用于配置<code>datasource</code>，即数据库连接，具体如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:rabbit</span>=<span class="string">"http://www.springframework.org/schema/rabbit"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/rabbit&gt;</div><div class="line">	&lt;bean id="<span class="attr">dataSource</span>" <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span></span></div><div class="line">                  <span class="attr">value</span>=<span class="string">"jdbc:mysql://$&#123;db.host&#125;:$&#123;db.port&#125;/$&#123;db.name&#125;?useUnicode=true&amp;amp;characterEncoding=UTF-8"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;db.username&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;db.password&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"100"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span> <span class="attr">value</span>=<span class="string">"1800"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span> <span class="attr">value</span>=<span class="string">"3"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span> <span class="attr">value</span>=<span class="string">"1000"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idleConnectionTestPeriod"</span> <span class="attr">value</span>=<span class="string">"60"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryAttempts"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"breakAfterAcquireFailure"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testConnectionOnCheckout"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>spring-orm.xml</code>用于配置mybatis，具体如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">       http://www.springframework.org/schema/context</div><div class="line">       http://www.springframework.org/schema/context/spring-context.xsd</div><div class="line">       "&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"server.model.mapper"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"server.model.entity"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionTemplateBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSession"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"server.model.mapper"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="java代码UserMapper"><a href="#java代码UserMapper" class="headerlink" title="java代码UserMapper"></a>java代码UserMapper</h3><p><code>UserMapper.java</code>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Select</span>(<span class="string">"select * from User where id=#&#123;id&#125;"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Long id)</span>;</div><div class="line">	</div><div class="line">    <span class="meta">@Select</span>(<span class="string">"select * from User where username=#&#123;name&#125;"</span>)</div><div class="line">    <span class="meta">@Results</span>(value = &#123;<span class="meta">@Result</span>(property = <span class="string">"id"</span>, column = <span class="string">"id"</span>),</div><div class="line">            <span class="meta">@Result</span>(property = <span class="string">"username"</span>, column = <span class="string">"username"</span>),</div><div class="line">            <span class="meta">@Result</span>(property = <span class="string">"sex"</span>, column = <span class="string">"sex"</span>),</div><div class="line">            <span class="meta">@Result</span>(property = <span class="string">"address"</span>, column = <span class="string">"address"</span>)</div><div class="line">    &#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByName</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>没有<code>@Mapper</code>的标志注解，其余用法与spring boot框架相同。</p>
<h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>很显然，Spring boot中通过<code>@Mapper</code>与<code>@MapperScan</code>两个注解完成了spring中大量xml配置的工作，这也是Spring boot架构的目的。</p>
]]></content>
    
    <summary type="html">
    
      mybatis的相关用途，及将mybatis整合进Springboot框架的用法，附录中介绍mybatis集成进Spring的方法。
    
    </summary>
    
      <category term="Java Web" scheme="http://yoursite.com/categories/Java-Web/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
      <category term="mybatis" scheme="http://yoursite.com/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Spring &amp; mongodb(morphia)</title>
    <link href="http://yoursite.com/2017/02/05/mongodb_morphia_config/"/>
    <id>http://yoursite.com/2017/02/05/mongodb_morphia_config/</id>
    <published>2017-02-05T02:11:01.000Z</published>
    <updated>2017-02-25T05:17:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Step-1-Maven依赖"><a href="#Step-1-Maven依赖" class="headerlink" title="Step 1: Maven依赖"></a>Step 1: Maven依赖</h2><p>首先需要导入mongodb的依赖，然后再导入<a href="http://mongodb.github.io/morphia/" target="_blank" rel="external">morphia</a>框架，这是由于非结构化数据库如果没有对象关系映射，在较为复杂的项目中会非常繁琐，因此morphia起到了orm的功能。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mongodb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mongo-java-driver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mongodb.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mongodb.morphia<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>morphia<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;morphia.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong><em>Note:</em></strong></p>
<p>这里有个大坑，就是上述代码中的两个<code>&lt;version&gt;&lt;/version&gt;</code>需要匹配！！！否则会出现<code>java.lang.ClassNotFoundException: com.mongodb.client.model.DBCollectionFind</code>类似的错误，这里我使用以下两个版本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;mongodb.version&gt;3.2.2&lt;/mongodb.version&gt;</div><div class="line">&lt;morphia.version&gt;1.0.1&lt;/morphia.version&gt;</div></pre></td></tr></table></figure>
<h2 id="Step-2-配置spring-morphia-xml"><a href="#Step-2-配置spring-morphia-xml" class="headerlink" title="Step 2: 配置spring-morphia.xml"></a>Step 2: 配置spring-morphia.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mongoOptions"</span> <span class="attr">class</span>=<span class="string">"com.mongodb.MongoOptions"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionsPerHost"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 连接超时时间(毫秒)，默认为10000 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectTimeout"</span> <span class="attr">value</span>=<span class="string">"10000"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 是否创建一个finalize方法，以便在客户端没有关闭DBCursor的实例时，清理掉它。默认为true --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cursorFinalizerEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 线程等待连接可用的最大时间(毫秒)，默认为120000 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitTime"</span> <span class="attr">value</span>=<span class="string">"120000"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 可等待线程倍数，默认为5.例如connectionsPerHost最大允许10个连接，则10*5=50个线程可以等待，更多的线程将直接抛异常 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"threadsAllowedToBlockForConnectionMultiplier"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- socket读写时超时时间(毫秒)，默认为0，不超时 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"socketTimeout"</span> <span class="attr">value</span>=<span class="string">"0"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 是socket连接在防火墙上保持活动的特性，默认为false --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"socketKeepAlive"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 对应全局的WriteConcern.SAFE，默认为false --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"safe"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 对应全局的WriteConcern中的w，默认为0 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"w"</span> <span class="attr">value</span>=<span class="string">"0"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 对应全局的WriteConcern中的wtimeout，默认为0 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"wtimeout"</span> <span class="attr">value</span>=<span class="string">"0"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 对应全局的WriteConcern.FSYNC_SAFE，如果为真，每次写入要等待写入磁盘，默认为false --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"fsync"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 对应全局的WriteConcern.JOURNAL_SAFE，如果为真，每次写入要等待日志文件写入磁盘，默认为false --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"j"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 使用工厂创建mongo实例 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mongo"</span> <span class="attr">class</span>=<span class="string">"info.yqzhong.util.MongoFactoryBean"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- mongoDB的配置对象 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mongoOptions"</span> <span class="attr">ref</span>=<span class="string">"mongoOptions"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 是否主从分离(读取从库)，默认为false，读写都在主库 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"readSecondary"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 设定写策略，默认为WriteConcern.SAFE，优先级高于mongoOptions中的safe --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"writeConcern"</span> <span class="attr">value</span>=<span class="string">"SAFE"</span>/&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 设定服务器列表，默认为localhost:27017 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"serverStrings"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>&#123;myIp&#125;:&#123;port&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- collection的名称 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dbName"</span> <span class="attr">value</span>=<span class="string">"&#123;dbName&#125;"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 用户名和密码可以为空 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"&#123;username&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"&#123;password&#125;"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 使用工厂创建morphia实例，同时完成类映射操作 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"morphia"</span> <span class="attr">class</span>=<span class="string">"info.yqzhong.util.MorphiaFactoryBean"</span> &gt;</span></div><div class="line">        <span class="comment">&lt;!-- 指定要扫描的POJO包路径 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapPackages"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>info.yqzhong.entity<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 使用工厂创建datastore，同时完成index和caps的确认操作 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datastore"</span> <span class="attr">class</span>=<span class="string">"info.yqzhong.util.DatastoreFactoryBean"</span> &gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"morphia"</span> <span class="attr">ref</span>=<span class="string">"morphia"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mongo"</span> <span class="attr">ref</span>=<span class="string">"mongo"</span>/&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- collection的名称 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dbName"</span> <span class="attr">value</span>=<span class="string">"&#123;dbName&#125;"</span>/&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 是否进行index和caps的确认操作，默认为flase --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"toEnsureIndexes"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"isToEnsureCaps"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>将此xml加载到spring主配置文件下即可。</p>
<h2 id="Step-3-工具类"><a href="#Step-3-工具类" class="headerlink" title="Step 3: 工具类"></a>Step 3: 工具类</h2><h3 id="MongoFactoryBean-java"><a href="#MongoFactoryBean-java" class="headerlink" title="MongoFactoryBean.java"></a>MongoFactoryBean.java</h3><p>这个类的主要作用是创建一个MongoClient(用于链接mongodb)，这里的部分参数均在上方配置文件中已经配置好。</p>
<p><strong><em>注意！之前找资料时没有找到链接服务器上的mongodb，部分教程也有些小问题，用户名密码也不知道应该在哪里使用到，查了mongodb官方的api后应该在此处进行用户名密码的配置，而不是在Datastore那配置！！！</em></strong></p>
<p>以下为代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> info.yqzhong.data.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.mongodb.*;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.AbstractFactoryBean;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 17/2/4.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoFactoryBean</span> <span class="keyword">extends</span> <span class="title">AbstractFactoryBean</span>&lt;<span class="title">MongoClient</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 表示服务器列表</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String[] serverStrings;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * mongo配置对象</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> MongoOptions mongoOptions;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否主从分离，默认为false</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> readSecondary = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line">    <span class="keyword">private</span> String dbName;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> String[] getServerStrings() &#123;</div><div class="line">        <span class="keyword">return</span> serverStrings;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServerStrings</span><span class="params">(String[] serverStrings)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.serverStrings = serverStrings;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> MongoOptions <span class="title">getMongoOptions</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mongoOptions;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMongoOptions</span><span class="params">(MongoOptions mongoOptions)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mongoOptions = mongoOptions;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> WriteConcern <span class="title">getWriteConcern</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> writeConcern;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWriteConcern</span><span class="params">(WriteConcern writeConcern)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.writeConcern = writeConcern;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReadSecondary</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> readSecondary;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadSecondary</span><span class="params">(<span class="keyword">boolean</span> readSecondary)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.readSecondary = readSecondary;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.username = username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDbName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> dbName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDbName</span><span class="params">(String dbName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.dbName = dbName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> WriteConcern writeConcern = WriteConcern.SAFE;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</div><div class="line">        <span class="keyword">return</span> MongoClient.class;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> MongoClient <span class="title">createInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        MongoClient mongo = initMongo();</div><div class="line"></div><div class="line">        <span class="comment">// read?</span></div><div class="line">        <span class="keyword">if</span> (readSecondary) &#123;</div><div class="line">            mongo.setReadPreference(ReadPreference.secondaryPreferred());</div><div class="line">        &#125;</div><div class="line">        mongo.setWriteConcern(writeConcern);</div><div class="line">        <span class="keyword">return</span> mongo;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * init mongoclient</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> MongoClient <span class="title">initMongo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">//根据条件创建mongo实例</span></div><div class="line">        MongoClient mongo = <span class="keyword">null</span>;</div><div class="line">        List&lt;MongoCredential&gt; credentialsList = <span class="keyword">new</span> ArrayList&lt;MongoCredential&gt;();</div><div class="line">        MongoCredential credentia = MongoCredential.createCredential(</div><div class="line">                username, dbName, password.toCharArray());</div><div class="line">        credentialsList.add(credentia);</div><div class="line"></div><div class="line">        List&lt;ServerAddress&gt; serverList = getServerList();</div><div class="line">        mongo = <span class="keyword">new</span> MongoClient(serverList.get(<span class="number">0</span>), credentialsList);</div><div class="line">        <span class="keyword">return</span> mongo;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * get mongodb address</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> List&lt;ServerAddress&gt; <span class="title">getServerList</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        List&lt;ServerAddress&gt; serverList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">for</span> (String serverString: serverStrings) &#123;</div><div class="line">                String[] temp = serverString.split(<span class="string">":"</span>);</div><div class="line">                String host = temp[<span class="number">0</span>];</div><div class="line">                <span class="keyword">if</span> (temp.length &gt; <span class="number">2</span>) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">                            <span class="string">"Invalid server address string:"</span> + serverString</div><div class="line">                    );</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (temp.length == <span class="number">2</span>) &#123;</div><div class="line">                    serverList.add(<span class="keyword">new</span> ServerAddress(host, Integer.parseInt(temp[<span class="number">1</span>])));</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    serverList.add(<span class="keyword">new</span> ServerAddress(host));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> serverList;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(</div><div class="line">                    <span class="string">"Error while converting serverString to ServerAddressList"</span>, e</div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="MorphiaFactoryBean-java"><a href="#MorphiaFactoryBean-java" class="headerlink" title="MorphiaFactoryBean.java"></a>MorphiaFactoryBean.java</h3><p>这个类是用于配置morphia框架的，主要包括了实体类的扫描包指定，忽略的类指定等。与大部分教程类似，以下为代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> info.yqzhong.data.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.mongodb.morphia.Morphia;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.AbstractFactoryBean;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 17/2/4.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MorphiaFactoryBean</span> <span class="keyword">extends</span> <span class="title">AbstractFactoryBean</span>&lt;<span class="title">Morphia</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 要扫描的包</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String[] mapPackages;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 要映射的类</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String[] mapClasses;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 扫描包时，是否忽略不映射的类</div><div class="line">     * 这里按照Morphia的原始定义，默认设为false</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> ignoreInvalidClasses;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String[] getMapPackages() &#123;</div><div class="line">        <span class="keyword">return</span> mapPackages;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMapPackages</span><span class="params">(String[] mapPackages)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mapPackages = mapPackages;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String[] getMapClasses() &#123;</div><div class="line">        <span class="keyword">return</span> mapClasses;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMapClasses</span><span class="params">(String[] mapClasses)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mapClasses = mapClasses;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIgnoreInvalidClasses</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ignoreInvalidClasses;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIgnoreInvalidClasses</span><span class="params">(<span class="keyword">boolean</span> ignoreInvalidClasses)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ignoreInvalidClasses = ignoreInvalidClasses;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</div><div class="line">        <span class="keyword">return</span> Morphia.class;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Morphia <span class="title">createInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Morphia morphia = <span class="keyword">new</span> Morphia();</div><div class="line">        <span class="keyword">if</span> (mapPackages != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (String packageName: mapPackages) &#123;</div><div class="line">                morphia.mapPackage(packageName, ignoreInvalidClasses);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mapClasses != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (String entityClass: mapClasses) &#123;</div><div class="line">                morphia.map(Class.forName(entityClass));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> morphia;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="DatastoreFactoryBean-java"><a href="#DatastoreFactoryBean-java" class="headerlink" title="DatastoreFactoryBean.java"></a>DatastoreFactoryBean.java</h3><p>此文件是用来创建morphia中最重要的一块datastore的类，所有对于数据库的增删改查几乎都可以使用datastore来进行操作。以下为代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> info.yqzhong.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.mongodb.morphia.Morphia;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.AbstractFactoryBean;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 17/2/4.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MorphiaFactoryBean</span> <span class="keyword">extends</span> <span class="title">AbstractFactoryBean</span>&lt;<span class="title">Morphia</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 要扫描的包</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String[] mapPackages;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 要映射的类</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String[] mapClasses;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 扫描包时，是否忽略不映射的类</div><div class="line">     * 这里按照Morphia的原始定义，默认设为false</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> ignoreInvalidClasses;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String[] getMapPackages() &#123;</div><div class="line">        <span class="keyword">return</span> mapPackages;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMapPackages</span><span class="params">(String[] mapPackages)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mapPackages = mapPackages;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String[] getMapClasses() &#123;</div><div class="line">        <span class="keyword">return</span> mapClasses;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMapClasses</span><span class="params">(String[] mapClasses)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mapClasses = mapClasses;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIgnoreInvalidClasses</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ignoreInvalidClasses;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIgnoreInvalidClasses</span><span class="params">(<span class="keyword">boolean</span> ignoreInvalidClasses)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ignoreInvalidClasses = ignoreInvalidClasses;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</div><div class="line">        <span class="keyword">return</span> Morphia.class;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Morphia <span class="title">createInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Morphia morphia = <span class="keyword">new</span> Morphia();</div><div class="line">        <span class="keyword">if</span> (mapPackages != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (String packageName: mapPackages) &#123;</div><div class="line">                morphia.mapPackage(packageName, ignoreInvalidClasses);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mapClasses != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (String entityClass: mapClasses) &#123;</div><div class="line">                morphia.map(Class.forName(entityClass));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> morphia;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Step-4-使用"><a href="#Step-4-使用" class="headerlink" title="Step 4: 使用"></a>Step 4: 使用</h2><h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类:"></a>创建实体类:</h3><h4 id="User-java"><a href="#User-java" class="headerlink" title="User.java"></a>User.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> info.yqzhong.entity;</div><div class="line"></div><div class="line"><span class="keyword">import</span> lombok.Data;</div><div class="line"><span class="keyword">import</span> org.bson.types.ObjectId;</div><div class="line"><span class="keyword">import</span> org.mongodb.morphia.annotations.Embedded;</div><div class="line"><span class="keyword">import</span> org.mongodb.morphia.annotations.Entity;</div><div class="line"><span class="keyword">import</span> org.mongodb.morphia.annotations.Id;</div><div class="line"><span class="keyword">import</span> org.mongodb.morphia.annotations.Reference;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 17/2/4.</div><div class="line"> */</div><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="meta">@Entity</span>(<span class="string">"user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> ObjectId id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> String phone;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="meta">@Reference</span></div><div class="line">    <span class="keyword">private</span> Company company;</div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="keyword">private</span> Address address;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上 <code>@Entity(&quot;user&quot;)</code>代表了user这个集合(Collection)</p>
<p><code>@Data</code>是<code>lombok.Data</code>，可以理解为自动生成set和get方法（这个可能会有坑！<strong><em>当出现<code>boolean isMale</code>类似的属性的时候，可以内部生成的set方法名为<code>public void setMale(boolean male)</code>，但是当你Controller接收ajax参数时可能识别不出来此set方法，因为java默认会找<code>setIsMale(boolean male)</code>方法，此时，解决办法是自己手动写一个set方法。。。</em></strong>）</p>
<p><code>@Id</code>是数据库集合的id，无法重复，可以指定任一属性，当然如上是mongodb自动生成的ObjectId为主键</p>
<p><code>@Reference</code>类似于外键的意思，<strong><em>这里也有个坑！如果你的数据库仅仅只有java这一种语言才能访问，那么这样写没有问题,但是！！！如果你的数据库集合可能还会有其他的项目访问，举个例子来说：有一个python爬虫项目，将扫描结果存进了mongodb数据库，而使用java来访问该数据库集合进行数据分析和展示，此时，<code>@Reference</code>会报<code>java.lang.ClassCastException: org.bson.types.ObjectId cannot be cast to com.mongodb.DBRef</code>这个错，是由于python和java对于mongodb不同存储结构的问题！解决方法是将<code>@Reference</code>换为<code>@Reference(idOnly = true)</code></em></strong></p>
<p><code>@Embedded</code>为内嵌的文档，可以理解为嵌入该文档的一个文档。</p>
<h4 id="Company-java-Reference）"><a href="#Company-java-Reference）" class="headerlink" title="Company.java (@Reference）"></a>Company.java (@Reference）</h4><p>和User.java一样的写法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">package info.yqzhong.entity;</div><div class="line"></div><div class="line">import lombok.Data;</div><div class="line">import org.bson.types.ObjectId;</div><div class="line">import org.mongodb.morphia.annotations.Entity;</div><div class="line">import org.mongodb.morphia.annotations.Id;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by zhongyq on 17/2/4.</div><div class="line"> */</div><div class="line">@Data</div><div class="line">@Entity(&quot;company&quot;)</div><div class="line">public class Company &#123;</div><div class="line">    @Id</div><div class="line">    private ObjectId id;</div><div class="line">    private String name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Address-java-Embedded"><a href="#Address-java-Embedded" class="headerlink" title="Address.java (@Embedded)"></a>Address.java (@Embedded)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package info.yqzhong.entity;</div><div class="line"></div><div class="line">import lombok.Data;</div><div class="line">import org.mongodb.morphia.annotations.Embedded;</div><div class="line">import org.mongodb.morphia.annotations.Entity;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by zhongyq on 17/2/4.</div><div class="line"> */</div><div class="line">@Data</div><div class="line">@Embedded</div><div class="line">public class Address &#123;</div><div class="line">    private String province;</div><div class="line">    private String street;</div><div class="line">    private String name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>唯一的区别在于<code>@Entity</code>变为了<code>@Embedded</code></p>
<h3 id="Step-6-Dao"><a href="#Step-6-Dao" class="headerlink" title="Step 6: Dao"></a>Step 6: Dao</h3><h4 id="UserDao-java-增删改查"><a href="#UserDao-java-增删改查" class="headerlink" title="UserDao.java(增删改查)"></a>UserDao.java(增删改查)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> info.yqzhong.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> info.yqzhong.entity.User;</div><div class="line"><span class="keyword">import</span> org.bson.types.ObjectId;</div><div class="line"><span class="keyword">import</span> org.mongodb.morphia.Datastore;</div><div class="line"><span class="keyword">import</span> org.mongodb.morphia.dao.BasicDAO;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 17/2/4.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">BasicDAO</span>&lt;<span class="title">User</span>, <span class="title">ObjectId</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDao</span><span class="params">(Datastore ds)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(ds);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">    	<span class="keyword">this</span>.save(user);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">    	User user = get(<span class="keyword">new</span> ObjectId(id));</div><div class="line">    	<span class="keyword">return</span> user;</div><div class="line">    	<span class="comment">// 或者：</span></div><div class="line">    	<span class="comment">// Query&lt;User&gt; query = getDatastore().find(User).field("id").equal(new ObjectId(id));</span></div><div class="line">    	<span class="comment">// return query.get();</span></div><div class="line">    	<span class="comment">// 或者</span></div><div class="line">    	<span class="comment">// return query.asList().get(0);</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function">pubic <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        User u = getUserById(user.getId());</div><div class="line">        UpdateOperations&lt;User&gt; updateOperations = getDatastore().createUpdateOperations(User).set(<span class="string">"name"</span>, user.getName()).set(<span class="string">"phone"</span>, user.getPhone());</div><div class="line">        getDatastore().update(u, updateOperations);</div><div class="line">        <span class="comment">// 若要改一个列表的User的话，可以调用update(Query&lt;User&gt;， UpdateOperations&lt;User&gt;)</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        delete(user);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在spring-morphia-xml中配置"><a href="#在spring-morphia-xml中配置" class="headerlink" title="在spring-morphia.xml中配置"></a>在spring-morphia.xml中配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"info.yqzhong.dao.UserDao"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"datastore"</span> <span class="attr">index</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>此时若要在Service中调用只要</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> UserDao userDao;</div></pre></td></tr></table></figure>
<p>即可直接调用userDao。</p>
<p>至此基本配置及用法已经基本完成。就先说到这吧！</p>
]]></content>
    
    <summary type="html">
    
      本文主要介绍spring框架整合mongodb的orm框架morphia。
    
    </summary>
    
      <category term="Java mongodb" scheme="http://yoursite.com/categories/Java-mongodb/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="mongodb" scheme="http://yoursite.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Java 执行 命令行命令（sh脚本）</title>
    <link href="http://yoursite.com/2016/12/12/java_run_sh_cmd/"/>
    <id>http://yoursite.com/2016/12/12/java_run_sh_cmd/</id>
    <published>2016-12-12T13:33:03.000Z</published>
    <updated>2017-02-25T05:15:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="step-1-common-method"><a href="#step-1-common-method" class="headerlink" title="step 1: common method"></a>step 1: common method</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这里的cmd是命令行的命令，涉及到环境变量等因素，跟操作系统相关，例如本命令执行当前目录下aaa.sh脚本文件</span></div><div class="line">cmd = <span class="string">'sh aaa.sh'</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    Process process = Runtime.getRuntime().exec(cmd);</div><div class="line">    <span class="comment">//读取标准输出流</span></div><div class="line">    BufferedReader bufferedReader =<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(process.getInputStream()));</div><div class="line">    System.out.println(<span class="string">"=========output:=========="</span>);</div><div class="line">    String line;</div><div class="line">    <span class="keyword">while</span> ((line=bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">        System.out.println(line);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//读取标准错误流</span></div><div class="line">    System.out.println(<span class="string">"========error:=========="</span>);</div><div class="line">    BufferedReader brError = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(process.getErrorStream(), <span class="string">"utf-8"</span>));</div><div class="line">    String errline = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">while</span> ((errline = brError.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">        System.out.println(errline);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> exitValue = process.waitFor();</div><div class="line">    <span class="comment">// exitValue为错误代码</span></div><div class="line">    <span class="comment">// do something...</span></div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">    <span class="comment">// do something...</span></div><div class="line">&#125;  <span class="keyword">catch</span> (InterruptedException e1) &#123;</div><div class="line">    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">    <span class="comment">// do something...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Step-2-在tomcat等其他环境下的工程执行sh脚本"><a href="#Step-2-在tomcat等其他环境下的工程执行sh脚本" class="headerlink" title="Step 2: 在tomcat等其他环境下的工程执行sh脚本"></a>Step 2: 在tomcat等其他环境下的工程执行sh脚本</h2><p>运行上面的代码，可以发现在本地项目（本地工程）运行上述代码可以发现运行顺畅，但是当你<strong>部署到服务器上发布一个上线版本</strong>，例如部署到tomcat上时，则有很大的可能发现部分脚本命令找不到，例如mvn、git（已经配置到环境变量里面的命令）等命令，都会发现上述代码执行后的exitValue为-1，这种问题很坑！在这种情况下，<strong>解决方法是：</strong>把命令写成全路径下的命令，例如<code>mvn package</code>写为<code>/usr/local/bin/mvn package</code>，如果不知道mvn等命令的具体位置，则可以使用<code>which mvn</code>来找到。</p>
]]></content>
    
    <summary type="html">
    
      本文主要介绍java执行sh脚本等相关事宜及注意事项。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE 在线答题平台的课程设计思考</title>
    <link href="http://yoursite.com/2016/12/10/web_testing_platform_1/"/>
    <id>http://yoursite.com/2016/12/10/web_testing_platform_1/</id>
    <published>2016-12-10T14:31:29.000Z</published>
    <updated>2017-02-25T05:00:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Step-1-需求"><a href="#Step-1-需求" class="headerlink" title="Step 1: 需求"></a>Step 1: 需求</h2><p>类似大部分的平台，我们希望能够做出一个平台能够做出一个能够在线答题的平台系统，希望能够有良好的扩展性、能够简单的出题答题、记录答题记录、查看评分等基本功能。</p>
<h2 id="Step-2-环境"><a href="#Step-2-环境" class="headerlink" title="Step 2: 环境"></a>Step 2: 环境</h2><ul>
<li>OS: Linux(CentOS) </li>
<li>Server: Tomcat 7</li>
<li>Database: Mysql</li>
</ul>
<p>安装较为简单，这里不再多说。</p>
<ul>
<li>Maven项目</li>
<li>Java 1.7及以上</li>
<li>spring + hibernate</li>
</ul>
<h2 id="Step-3-课程设计"><a href="#Step-3-课程设计" class="headerlink" title="Step 3: 课程设计"></a>Step 3: 课程设计</h2><p>这对于整个平台是最重要的一个问题。为了扩展性，很明显课程单独提出来尤为重要。</p>
<ul>
<li><p>课程信息如何存储？—— maven模块，生成jar包存储。</p>
<ul>
<li>前面提到了本平台使用mysql数据库，那么这个数据库是否要存储课程的信息？包括了课程题目的描述、目的、提示、答案、步骤等等信息。那么真的存数据库很好吗？</li>
<li>我们考虑到如果课程信息存在mysql数据库，那么必然会带来一个性能瓶颈就是每次每位答题用户请求查看一道题，都会访问一遍数据库，那么如果有很多个用户访问很多道题目呢？这必然会导致数据库压力，访问速度回应速度都会受到严重的影响。</li>
<li>那么到底怎么做才能较好的解决呢？</li>
<li><strong>答：</strong> 这里我们想到了maven模块的作用，将每一门课变成一个maven模块（每个模块都类似于一个小工程，有自己的类、自己的方法和资源文件），然后在每次项目启动时候都将所有的课程模块加载进来即可，这样每当一位用户加载多道题目的时候，仅需要调用模块中的相应方法即可，（这也类似于将每道题都变成了一个类，直接通过类的方法获取题目的具体信息）。</li>
<li><strong>但是这将面临一个问题：每次项目部署的时候需要太长的加载时间，并且难以做到热部署</strong></li>
</ul>
</li>
<li><p>如果使用maven模块，如何动态添加课程（热部署）？<strong>Tomcat中对jar包实现伪热部署</strong></p>
<ul>
<li>我们都知道java本身并不支持热部署（这个真的是弱点啊！），每次重新编译和启动java web项目都得等好久，调试也极为困难（前端当然除外），那么，对于添加课程到底要如何解决？</li>
<li><strong>答: </strong>很好的是Tomcat支持解压编译好的jar文件！这也是我们使用maven模块将添加的课程，再通过maven命令编译打包成jar文件，复制给tomcat中已运行的项目下，来通过代码解压jar包实现动态部署课程。</li>
</ul>
</li>
</ul>
<p>附：解压jar包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">WebappClassLoader cl = (WebappClassLoader) Thread.currentThread().getContextClassLoader();</div><div class="line">cl.clearAssertionStatus();</div><div class="line">List&lt;URL&gt; jars = listJars(); //此方法为获取目录下所有的jar包</div><div class="line">for (URL jar : jars) &#123;</div><div class="line">	cl.addRepository(jar.toString());</div><div class="line">&#125;</div><div class="line"></div><div class="line">final ExecutorService executorService = Executors.newFixedThreadPool(10);</div><div class="line">try &#123;</div><div class="line">    final List&lt;Plugin&gt; plugins = Lists.newArrayList();</div><div class="line">    final CompletionService&lt;Plugin&gt; completionService = new ExecutorCompletionService&lt;&gt;(executorService);</div><div class="line">    final List&lt;Callable&lt;Plugin&gt;&gt; callables = extractJars(jars);</div><div class="line"></div><div class="line">    for (Callable&lt;Plugin&gt; s : callables) &#123;</div><div class="line">        completionService.submit(s);</div><div class="line">    &#125;</div><div class="line">    int n = callables.size();</div><div class="line">    for (int i = 0; i &lt; n; i++) &#123;</div><div class="line">    	 // Plugin为一个基本类，里面包含了jar文件目录信息</div><div class="line">        Plugin plugin = completionService.take().get();</div><div class="line">        if (plugin.getLesson().isPresent()) &#123;</div><div class="line">            plugins.add(plugin);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125; finally &#123;</div><div class="line">    executorService.shutdown();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先写到这吧～</p>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了对于一个在线答题的平台的设计与架构过程中的一些思考，参考owasp的webgoat平台。
    
    </summary>
    
      <category term="Java Web" scheme="http://yoursite.com/categories/Java-Web/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
      <category term="web testing" scheme="http://yoursite.com/tags/web-testing/"/>
    
  </entry>
  
  <entry>
    <title>《黑客与画家》读书笔记</title>
    <link href="http://yoursite.com/2016/11/06/%E3%80%8AHackers%20&amp;%20Painters%20Big%20Ideas%20from%20the%20Computer%20Age%E3%80%8B_reading_notes/"/>
    <id>http://yoursite.com/2016/11/06/《Hackers &amp; Painters Big Ideas from the Computer Age》_reading_notes/</id>
    <published>2016-11-06T10:56:10.000Z</published>
    <updated>2017-02-25T05:26:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="推荐理由："><a href="#推荐理由：" class="headerlink" title="推荐理由："></a>推荐理由：</h2><p>本书是一本奇特的书，分为黑客的成长及世界观、黑客如何做出成果、黑客的工具和工作方法这三个部分来帮助读者理解黑客。作者通过幽默风趣的语言及言简意赅的案例来使读者更好的理解我们所处的计算机时代，来理解黑客的行为。黑客与画家一样都是创新型职业，编程行为就是艺术行为这种观点深受群众赞同，与此同时，还介绍了黑客的财富观和价值观，强调了创业的可行性。<br>本书的“为什么书呆子不受欢迎”与“如何创造财富”更是深入人心。</p>
<h2 id="本书要点："><a href="#本书要点：" class="headerlink" title="本书要点："></a>本书要点：</h2><ul>
<li>为什么书呆子不受欢迎：书呆子不受欢迎的真正原因，是他们脑子里想着别的事情，“书呆子”没有认识到“受欢迎”需要付出如此之多的努力。小孩子欺负书呆子的原因青少年在心理上还没有摆脱儿童状态和为了让自己好受一些。</li>
<li>黑客与画家：黑客与画家的共同之处在与他们都是创作者，都试图创作出优秀的作品。在新兴领域的市场作出大胆的设计并实现才能在这里战胜大公司。开发优秀软件的方法之一是创业。创作者解决生计的方法是“白天工作”。优秀的软件需要对美的狂热追求。换位思考才能做出伟大的作品。</li>
<li>不能说的话：凡是不认同社会之处连想都不敢想马上就放弃自己的观点会出问题。那些被认为真相的言论才会触怒他人。异端邪说也是一种不能说的话。智力越高的人越愿意去思考那些惊世骇俗的思想观点，一旦发现了不能说的话别说或者至少挑选合适的场合再说。如果想要清晰地思考就必须远离人群。</li>
<li>良好的坏习惯：黑客是不服从管教的，这是本性，也是黑客成为优秀程序员的原因之一，黑客的动机往往是满足智力上的好奇心。通过深入了解当前的技术，黑客才能构想下一代技术。版权法阻碍了外部人员了解专有技术的内部细节。</li>
<li>另一条路：部分的桌面软件转移到服务器上是不可避免的一种潮流。互联网软件数据更安全，可以频繁发布，可以使用任何想用的语言，能够再现大部分的bug，按服务付费是互联网软件天然的收费模式。</li>
<li>如何创造财富：最好的致富办法就是自己创业或者加入创业公司。创业公司的程序员创造财富的速率大大提高。工作就是在一个组织中与他人合作产出所需东西。小团队适合解决技术难题，公司越小越容易测量贡献。让自己的技术难以复制是对抗大公司最好的办法。</li>
<li>关注贫富分化：创造财富的速度可以快于掠夺财富的速度，技术的发展会加大了贫富差距，但缩小了大部分的其它差距。</li>
<li>防止垃圾邮件的一种方法：用统计学方法最有效的方法是使用“贝叶斯过滤”。使用多种方法可以达到更好的效果。可以给每个用户创建独立的概率分布表过滤邮件，另外加上白名单和黑名单会提高算法效率。</li>
<li>设计者的品味：好设计是简单的、永不过时的、解决主要问题的、启发性的、有点趣味性的、艰苦的、看似容易的、对称的、模仿大自然的、能够复制的、常常是奇特的、成批出现的、常常是大胆的设计。</li>
<li>编程语言解析：语言设计者之间的最大分歧也许就在于，有些人认为编程语言应该防止程序员干蠢事，另一些人则认为程序员应该可以用编程语言干一切他们想干的事。编程语言潜移默化中决定了使用者的思考方式。</li>
<li>一百年后的编程语言：编程语言放弃一定的性能换取便利性是可以接受的。一百年后的编程语言在理论上今天就能设计出来，且很可能现在就适合编程，并能产生好结果。</li>
<li>拒绝平庸：在竞争对手无法理解你的技术优势是很宝贵的。使用高层次语言能够快速开发产品。</li>
<li>书呆子的复仇：Lisp语言本质上是数学因此至今仍未过时。在高科技行业只有失败者采用“业界最佳实践”。使用高层次语言能够快速开发产品抢占市场先机。不要成为人肉编译机。</li>
<li>梦寐以求的编程语言：流行的编程语言必须简洁、易用、互动、抽象。黑客眼中的梦寐以求的编程语言特点除此之外还要内核优秀、易优化。</li>
<li>设计与研究：研究必须是“新”的，设计必须是“好”的，设计需要以用户为中心。</li>
</ul>
<h2 id="精编书摘："><a href="#精编书摘：" class="headerlink" title="精编书摘："></a>精编书摘：</h2><p>###为什么书呆子不受欢迎</p>
<ol>
<li>任何一种艺术，不管是否重要，如果你想要在该领域出类拔萃，就必须要全身心投入。</li>
<li>书呆子不受欢迎的重要原因，是他们的脑子里想着别的事情，他的注意力都放在读书或者观察世界上面。他们就像头顶着一杯水在踢足球，一遍踢球，一边还不想让杯子里的水洒出来。他人都在一门心思的踢足球，当然可以轻而易举的击败这种对手，并且心里还很奇怪，对方怎么如此无能。</li>
</ol>
<p>###黑客与画家</p>
<ol>
<li>黑客与画家的共同之处，在于他们都是创作者。</li>
<li>实际上只有很少一部分和可懂得如何正确设计软件，但是公司的管理层很难正确认识到谁才是真真正确的人。所以他们把软件设计交给一个委员会来设计。记住这一点，这是创业公司能够成功的原因之一。对于大公司，生产特别优秀的产品不是他们获胜的手段，他们只要不太烂就够了。</li>
<li>黑客如何才能做自己喜欢的事情？我认为这个问题的解决方法是一个几乎所有创作者都知道的方法：找一份养家糊口的“白天工作”。这个词是从音乐家身上来的，他们晚上表演音乐，所以白天可以找一份其他工作。更一般的说，“白天工作”的意思是，你有一份为了赚钱的工作，还有一份为了爱好的工作。</li>
<li>真正竞争软件设计的战场上新兴领域的市场，这里还没有大公司建立过防御工事。只要你能大胆去做，几乎所有的创业公司都是这样取得成功的。</li>
</ol>
<p>###不能说的话</p>
<ol>
<li>声望这个东西，总是经过漫长的时滞以后才会确立，它就像遥远星系发出的光，经过了许多光年才能被我们看到。</li>
<li>一旦发现了不能说的话别说，至少挑选合适的场合再说。</li>
</ol>
<p>###良好的坏习惯</p>
<ol>
<li>总体看来，黑客是不服从管教的，这往往会激怒管理当局。但是，不服从管教，其实是黑客之所以成为优秀程序员的原因之一。</li>
<li>在黑客网站Slashdot上面版权是永恒的讨论热点。为什么程序员那么关心版权，而不是其他事情？部分原因是，有些公司为了防盗版而使用了禁止复制的技术。这等于交给黑客一把锁，他的第一反应肯定是如何打开它。</li>
<li>只有深入了解当前的技术，黑客才能构想下一代技术。</li>
<li>最新的版权法设置了前所未有的障碍，禁止外部人员了解专有技术的内部细节，从而也就禁止了外部人员从这个途径产生新构想。</li>
</ol>
<p>###另一条路</p>
<ol>
<li>互联网软件的另一个技术优势在于，你能再现大部分的bug。用户的数据都在你的硬盘上。如果某个用户使用软件时出错了，你就不必像开发桌面软件那样苦苦猜测到底发生了什么事情。</li>
<li>那些占据高位、本能地想要约束黑客、强迫黑客服从的人们，请小心你们的要求，因为你们真有可能成为千古罪人。</li>
</ol>
<p>###如何创造财富</p>
<ol>
<li>要致富，你需要两样东西：可测量学和可放大性。你的职位产生的业绩，应该是可测量的，否则你做的再多，也不会得到更多的报酬。此外，你还必须有可放大性，也就是说你做出的决定能够产生巨大的效应。</li>
<li>假定软件有两个候选的新功能，它们创造的商业价值完全相同，那么我们总是选择较难的那个功能。不是因为这个功能能带来更多的收入，而是因为它比较难。我们很乐于迫使那些又大又慢的竞争对手跟着我们一起走进沼泽地。。</li>
</ol>
<p>###设计师的品味</p>
<ol>
<li>众多学科都追求“美”，这些美也遵从着相同的准则。</li>
</ol>
<p>###编程语言解析</p>
<ol>
<li>语言设计者之间的最大分歧也许就在于，有些人认为编程语言应该防止程序员干蠢事，另一些人则认为程序员应该可以用编程语言干一切他们想干的事。</li>
</ol>
<p>###书呆子的复仇</p>
<ol>
<li>在大型组织内部，有一个专门的术语描述这种跟随大多数人的选择的做法，叫做“业界最佳实践”。这个词出现的原因其实就是为了让你的经理可以推卸责任。既然我选择的是“业界最佳实践”，如果不成功，项目失败了，那么你也无法指责我，因为做出选择的人不是我，而是整个“业界”。 </li>
</ol>
<p>###设计与研究</p>
<ol>
<li>设计与研究的区别就在于，前者追求“好”，后者追求“新”。优秀的设计不一定很“新”，但必须是“好”的；优秀的研究不一定很“好”，但必须是“新”的。</li>
<li>人们真正注意到你的时候，不是第一眼看到你站在那里，而是发现过了这么久你居然还在那里。</li>
</ol>
<p>##作者介绍：<br>保罗·格雷厄姆，《黑客与画家》一书的作者，硅谷创业之父。</p>
]]></content>
    
    <summary type="html">
    
      读《黑客与画家》的摘录&amp;感想。
    
    </summary>
    
      <category term="books" scheme="http://yoursite.com/categories/books/"/>
    
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《软件管理沉思录》读书笔记</title>
    <link href="http://yoursite.com/2016/10/25/%E3%80%8AReflections%20on%20Mangagement%EF%BC%9AHow%20to%E3%80%8B_reading_notes/"/>
    <id>http://yoursite.com/2016/10/25/《Reflections on Mangagement：How to》_reading_notes/</id>
    <published>2016-10-25T09:16:10.000Z</published>
    <updated>2017-02-25T05:36:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>##推荐理由：<br>《软件管理沉思录》是软件工程项目管理方面的一本经典著作。<br>作者在书中详细介绍了在软件项目管理方面的一系列概念和经验，从管理项目、管理团队、管理领导、管理自己这四个方面来完整精细地描述整个软件项目过程中应该如何管理的，引入正反案例说明来说明注意事项的重要性，简明易懂。本书先从产品入手，讲明了产品质量和项目计划对整个软件过程的重要性，后从团队的角度着重说明了团队的高效、统一目标的重要性，并引出了团队领导者的重要性，必须要能激发、引导、督促和鼓励团队成员尽最大可能去完成工作。之后又对在整个过程中如何和领导交涉计划，给予了项目管理者很大的启发，最后又谈管理自己，囊括了软件开发过程中的所有管理社会人文管理步骤，是一本不可多得的好书。</p>
<p>##本书要点：</p>
<ul>
<li>交付高质量的产品：软件质量改进的需求是巨大的，我们每个人都应当注重质量。软件质量被定义为对用户的有用性。在软件质量中，首先应当关注的质量问题就是软件的缺陷。软件工程师需要为自己的程序质量承担个人责任，注重质量首先要以明确的目标为起点。</li>
<li>为高质量项目制定计划：最难以制定计划的时候也是最需要计划的时候，计划分为两种计划：阶段计划和产品计划。产品计划会帮助判断完成工作的时间，需要为每一项主要的工作制定产品计划。制定完计划后和管理者共同审查详细的计划。动态计划可以避免计划不准确，计划需要维护。</li>
<li>高效团队的基本素养：团队需要有共同的目标，团队合作会比个人工作更加出色，团队设计可能出现多种问题，失败的原因主要有四种。形成凝胶型团队是一种目标，高效团队需要团结、挑战性的目标、反馈和通用工作架构，团队会随着时间成长，工作型群体是完成任务的群体的最佳类型，自主指导型团队可以工作效率高效。</li>
<li>做一位高效的团队成员：优秀的团队成员会主动做任何需要做的事。承诺是道德规范，只有基于计划才能作出负责任的承诺；目标为工作建立了优先次序；新思想始于少数派，需要分享新思想；团队所有成员都应分享知识，并主动参与团队合作。每位成员需要帮助维护秩序，甘于请求帮助和提供帮助。</li>
<li>领导和指导你的团队：领导力决定成败，团队承诺似乎比个人承诺具有更大的激励作用。自愿作出并维护承诺，用短期目标制造紧迫感。选择新成员需要整个团队参与，愿意指导他人，让所有成员都参与讨论中，构建管理团队十分困难，进行理性管理很重要。</li>
<li>讨论项目并捍卫你的计划：计划不现实则需要重新计划并与管理层沟通，优先致力于优先级最高的事。在做出承诺之前要制定计划，多与管理者进行商谈，努力搞定手中事，不做专断的领导。工作环境专制不利于员工工作表现，进行过程改进时给出战略性理由和战术性理由。</li>
<li>控制你的工作：做好管理者角色，提高工作质量，管理内心产生的压力，抵制幻觉。甘于咨询支持人员，管理时间制定计划，持有负责任的主人翁心态，抵制拖延，信守承诺、管理承诺、制定目标追求卓越才能高质量完成项目。</li>
<li>学会领导：最成功的团队要经历充沛、富有热情、满怀信心以及严格要求的领导者，领导者要为团队树立榜样，避免领导力低下的一些症状，领导力必须是赢得得，努力成为一名变革型领导，做好中下层领导者，把经历几种在那些真正会影响工作的事项中。</li>
</ul>
<p>##精编书摘：</p>
<p>###交付高质量产品</p>
<ol>
<li>在软件开发过程中，为了保证质量始终如一，必需遵循以下8个步骤：确立质量控制的策略、目标和计划；正确训练、指导和支持开发人员及其团队；确立和维护软件需求的质量管理过程；确立和维护软件工程过程的统计控制；审查、检查并评估所有的产品制品；评估所有缺陷，加以更正并用以识别、纠正和预防其他类似问题；确立和维护配置管理和变更控制系统；持续改进开发过程。</li>
<li>对每一位软件工程师而言，缺陷都是应当高度关注的。由于用于测试的时间非常昂贵，并且很难事先预计，所以缺陷通常是导致项目成本和时间进度出现问题的最主要原因。软件工程师是发现和更正自己所编写程序里的缺陷的最佳人选。因此，软件工程师为自己的程序质量承担个人责任是十分重要的。</li>
<li>目标之所以重要，主要是基于以下两条原因：它们提供了努力的焦点，而且建立了一种优先次序。</li>
</ol>
<p>###交付高质量产品</p>
<ol>
<li>所有的项目或重要的工作都要制定产品计划。软件工程师在开发团队中工作的时候，还需要计划自己个人的工作。可以帮助开发人员在完成合作任务时互相承诺交付时间，并且能始终如一地履行承诺。</li>
<li>一份合格的产品计划应当包括三项内容：将要生产的产品规格和重要的性能指标；估算工作所需的时间；进度预测。复杂的产品需要更周密的计划和更多的信息：责任区分、人员安排、产品或过程详述、对其他团队的依赖一集专项的测试或质量规定等。</li>
<li>在PSP中，计划是第一步，这主要是基于以下三条理由。首先，如果没有好的计划，就不可能对软件项目进行有效的管理。其次，计划是一种技巧，它可以学习并在实践中得到提高。最后，良好的计划技巧会帮助你更好地从事软件工作。</li>
<li>深思熟虑的计划将会帮助你作出符合实际的承诺，并且还可以让你追踪和报告项目进展情况。只有团队成员的计划都合格，建立在此基础之上的整体计划才有可能是实际可行的。</li>
<li>最终得出的计划必须满足特定的要求。就一份计划而言，有五条基本的要求：易于理解、清晰明白、详细具体、精确缜密、准确无误。</li>
<li>通过动态的计划过程，项目团队可以评估每一项需求变更对项目带来的影响，并且只有在管理者理解并且同意对进度和资源进行必要调整时才进行变更。</li>
<li>项目团队应当进行定期分析，找出那些提前完成工作、能处理额外工作量的成员，一集那些落后于进度、需要减少任务的成员。</li>
</ol>
<p>###交付高质量产品</p>
<ol>
<li>TSP团队：一只团队至少要有两名成员；所有成员都是为了同一目标而工作；每位成员至少扮演一个特定的角色；完成任务要求团队成员之间相互依赖</li>
<li>对于团队成员最主要的要求是所有成员都要有一套共同的工作准则和方法。</li>
<li>学生团队最常见的问题主要涉及领导、合作、参与、拖延、质量、功能蔓延和评估等方面。</li>
<li>项目团队合作未能产生预期效果的原因有很多，但是最常见的问题不外乎以下四类：资源不足、领导问题、不可能的目标、士气问题。</li>
<li>高效团队必备的四个条件：凝聚力、目标、反馈、共同的工作架构。</li>
<li>自主指导型团队的典型行为：团队成员会主动发现需要做什么并及时去做。典型特征：具有团队感和归属感；共同对团队目标作出承诺；对过程和计划的主人翁意识；具有制订计划的技巧和执行计划的纪律；追求卓越。这种团队特别适合于进行创新性的开发工作。</li>
</ol>
<p>###做一位高效的团队成员</p>
<ol>
<li>优秀的团队成员会做任何需要做的事，这支团队会去做任何需要的事情而不用要求和指示。</li>
<li>目标是人类努力的动力，它们使我们的生活和工作充满活力，给了我们决心。实现目标会提供一种成就感和满足感。目标为项目团队提供了一种公共的工作框架。</li>
<li>要想让团队运行顺畅，每一位成员都应当奉献出他所知道的一切，这一点至关重要。</li>
<li>团队创建需要所有成员的主动参与，接受并扮演一个团队中的角色，确定并努力去实现团队目标，建立维护团队，才能成为凝胶型团队。</li>
<li>原则式谈判之所以有效的原因是它避免了立场的两极分化，基础是认识到离场只是满足利益的一种方式。</li>
<li>团队成员的一项重要责任就是寻求帮助。</li>
</ol>
<p>###领导和指导你的团队</p>
<ol>
<li>真正的创新性工作只有由杰出的领导者带领团队才能完成。</li>
<li>对于工作团队，由三条最重要的激励因素，那就是恐惧、贪婪和承诺。对开发工作来说，贪婪和恐惧都不是恰当的激励因素。承诺的三要素是协商、约定和执行。</li>
<li>要想激发开发团队的积极性，首先要求承诺必须是自愿的，其次承诺必须是可见的。再次，承诺必须是可信的。最后承诺必须要得到做这些工作的员工的承认。</li>
<li>理性管理的本质：首先确定目标时检查当前的工作情况，其次，为短期目标制订计划，再次评估和追踪计划完成情况和纪律执行情况，最后持续监督业务执行情况。</li>
</ol>
<p>###讨论项目并捍卫你的计划</p>
<ol>
<li>应当首先对工作抱着一种积极的态度，并且真正为乐的到一个更佳的交付日期而努力。首先要付出真诚的努力，然后，为得到的日期据理力争。</li>
<li>你的工作任务就是让团队聚焦于优先级最高的事情。</li>
<li>在作出任何承诺之前都要先制订一个计划。</li>
<li>专断的领导使员工失去动力并且严重影响工作表现。</li>
<li>在推行改进时，首先也是最重要的是要取得高层管理者的支持。这里有三个问题需要考虑：为什么想要改变？你需要从那些管理者那里取得支持？那些管理者为什么要支持你？ </li>
</ol>
<p>###控制你的工作</p>
<ol>
<li>自己把握主动需要分两步走：真正掌握你自己的工作，说服管理者同意由你管理自己。</li>
<li>改变工作方式所需的步骤：确定质量目标；衡量产品质量；理解过程；调整过程；应用调整后的过程；衡量结果；把结果与目标进行比较；循环并不断改进。</li>
<li>TSP展示了团队应当如何处理压力。它们分析工作、研究完成工作的策略、估算它们将要生产的产品的规模，在此基础上制订出计划。</li>
<li>信守承诺是一种精神状态。为了真正做到信守承诺，你必须已经自习考虑过所有可选项，并认定那是你能完成、也是你想要完成的事。需要做到：用计划来支持承诺、用书面形式记录下约定、如果出现了不能履行承诺的情况，马上告诉对方并努力把造成的影响最小化。</li>
<li>管理承诺最主要的原因是这样你就不会忽略或忘记它，另外一个原因是当你要做的工作超出了可用的时间时，这样做就可以帮助到你。</li>
<li>执着追求卓越，你才有可能臻于卓越，这样才不枉在人世走这一遭。</li>
</ol>
<p>###学会领导</p>
<ol>
<li>你的任务是要激励团队全力以赴地投入工作。要做到这一点，你必须信任团队中的所有成员，相信他们能战胜前面的所有困难，并且相信他们有能力成就非凡的事业。</li>
<li>团队的集体智慧要比那些哪怕是最富有技巧、最有才能的个体更有成效。</li>
<li>领导者拥有追随者，并且吸引这些追随者的是一个富有挑战和回报的目标。要想成为高效的领导者，你首先必须自己全身心地投入到大家共同的目标中去，然后这种实现目标的个人承诺才会给你所必需的精力和干劲。</li>
<li>做好中下层领导，尽管你看到的很多问题的确让人厌烦，但要把精力集中在那些真正会影响工作的事项上，而不是抱怨其他人。</li>
</ol>
<p>##作者介绍：<br>Watts S. Humphrey（沃茨·汉弗莱）<br>ACM会士，IEEE终身会士，卡内基—梅隆大学软件工程研究所（SEI）的资深研究员，SEI软件过程研究奠基人，SEI软件过程成熟度模型发明人<br>William R. Thomas（威廉·托马斯）<br>SEI技术交流团队主管，拥有近30年的传播、公关以及新闻从业经历，并负责过俄亥俄州扬斯敦和得克萨斯州加尔维斯敦多家报纸的商业和技术版面</p>
]]></content>
    
    <summary type="html">
    
      读《软件管理沉思录》的摘录&amp;感想。
    
    </summary>
    
      <category term="books" scheme="http://yoursite.com/categories/books/"/>
    
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《人件》读书笔记</title>
    <link href="http://yoursite.com/2016/10/03/%E3%80%8APeopleware-%20Productive%20Projects%20and%20Teams%E3%80%8B_reading_notes/"/>
    <id>http://yoursite.com/2016/10/03/《Peopleware- Productive Projects and Teams》_reading_notes/</id>
    <published>2016-10-03T14:16:10.000Z</published>
    <updated>2017-02-25T05:30:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>##推荐理由</p>
<p>《人件》被誉为“对美国软件行业影响最大的一本书”，是针对软件工程领域项目管理方面的一本著作。</p>
<p>作者在本书中从六个部分详细介绍了软件开发管理者应该注意的事宜，这六个方面涵盖了从企业工作外部物理环境到内部工作氛围的管理部署中每个管理者应该做的事，并通过引入实际项目中成功或失败的案例来着重提示正确或错误的做法。特别是整本书的重点观点：工作中的问题更多属于社会学范畴，而非技术范畴。非常赞同这个观点，这也是本书写作目的，来说明项目管理中人的重要性。如何有效管理团队，让正确的人干正确的活，让团队更加高效，让工作人员在工作中感到快乐是管理者的最高目的。读完本书对管理方面能够有着更深刻的认识和想法。</p>
<p>##本书要点：</p>
<ul>
<li><p>管理人力资源：提出本书主旨：工作中的主要问题是社会学问题，但是大部分经理都很少用这样的方式去管理，而是花很长时间去解决技术问题，这种现象造成了人力资源的极大浪费。对大多数脑力劳动者来说，工作偶尔出错很健康正常。管理者不应该给过多压力，否则会破坏工作氛围。管理者的作用不是让大家去工作，而是创造环境，让大家可以顺利开展工作。</p>
</li>
<li><p>办公环境：造成工作时间流逝的原因很多，可能大部分都是由于组织给你的工作环境造成的。工作环境的质量直接关系着开发者的效率。在自然光下工作这种良好的感觉可以提供更好的质量。影响工作时间的质量导致打断的罪魁祸首是呼入的电话，电子邮件是一种比较好的交流方式。</p>
</li>
<li><p>正确的人：管理者要重视雇佣和留用正确的人，找到合适的人、让他们愉快工作，不愿离开，让他们自由发挥。雇用员工应该注重员工对公司的贡献而不是着装。成功的管理者能摇动熵、带来正确的员工，并让他们展现自我，甚至运行他们便里公司的标准。员工离开原因有过客心态、可被替代感。减员的后果是引入新人上手的时间及成本及原本项目落后的进程成本。作为经理，就应该注重这些地方，留住人才。</p>
</li>
<li><p>高效团队养成：当团队称为一个整体时，大家工作会变得更好，更富有乐趣。管理者避免防御式管理、官僚主义、物理分割、时间碎片、牺牲产品质量、伪造截止日期、团伙控制的手段，避免强迫加班和减少不必要的竞争。好的管理者会经常给团队提供机会，让大家来一起享受成功，有着对质量的执著追求、提供诸多满意的闭环、建立精英意识、允许和鼓励差异性、维护和保护成功团队、提供战略的坚定信念。</p>
</li>
<li><p>沃土：不要逃避风险，不要利用会议浪费大家的时间。建立一个少垃圾邮件、自我协调的组织，组织学习和建立社区来形成沃土吸引人才。</p>
</li>
<li><p>快乐地工作：最好的经理能够挑出少数能把前瞻性和成熟恰当混合在一起的关键人才，并使之不受约束。工作就应该是快乐的，经常开一些不正式会议、进行头脑风暴等交互式会议都会提高创新力和洞察力。</p>
</li>
</ul>
<p>##精编书摘：</p>
<p>###管理人力资源</p>
<ol>
<li>我们工作中的问题更多属于社会学范畴，而非技术范畴。</li>
<li>大多数管理者坦承：他们对人的担心更甚于对技术的担心，但他们很少以此种方式去管理。</li>
<li>对大多数脑力劳动者来说，工作偶尔出错再自然不过，也很健康，没什么危害。但总有些教条主义者会把工作中的错误和罪恶联系起来。</li>
<li>营造一个不容许任何失误的氛围会让大家持有戒心。</li>
<li>人性化的管理者却能认识到正式这种独特性使得项目团队产生了化学反应，是团队充满活力与高效的源泉。</li>
<li>在获得高生产效率时，一定要考虑可能的人员流失，不然所谓的“提高”可能会因重要人员的流失而被抵消。</li>
<li>压力不会让人工作得更好——只是工作的更快。</li>
<li>采取任何可能牺牲产品质量的行动都可能挑起员工反对你的情绪。</li>
<li>质量，远远不只是最终用户的要求，而是达到高产能的一种方法。</li>
<li>管理者的作用不是让大家去工作，而是创造环境，让大家可以顺利开展工作。</li>
</ol>
<p>###办公环境</p>
<ol>
<li>人们更喜欢在自然光下工作，这种良好的感觉能直接转换为工作的更高质量。</li>
<li>在工作环境设计上采取弃权政策是一个错误。工作环境的质量直接关系着开发者的效率。</li>
<li>基于流计算的工作时间计算体系具有如下两大明显优势：第一，这让大家都能够关注流时间的重要性，可以避免大家不被同伴随意打扰，第二能够建立起一个有效工作时间的统计。</li>
<li>影响工作时间的质量导致打断的罪魁祸首是呼入的电话。我们的工作方式却是被电话改变了，但我们不应该对打断带来的影响视而不见。</li>
<li>电话与电子邮件之间的主要差别在于电话是打断性质的，而电子邮件不会，邮件的接受者可以在它方便的时候来处理。</li>
<li>办公环境设计往往过分关注外观，事实上，与设计密切相关的是要看工作环境能否让你安心开展工作。</li>
<li>封闭办公室并非就是一个人的办公室，两人、三人活着死人的办公室范儿更佳合理，最好是按照工作组来划分办公室。</li>
<li>遵循四种模式：从工具箱里定制工作空间、窗户、室内和室外空间、公共空间。</li>
</ol>
<p>###正确的人</p>
<ol>
<li>在一个更佳健康的组织文化里，衡量一个人是否专业，看的是他的学识和能力。</li>
<li>最成功的管理者总是能摇动熵、带来正确的员工，并让他们展现自我，甚至运行他们便里公司的标准。</li>
<li>主动承担任务、明显地胜任工作、为人物准备提前做足必要的功课、让每个人创造最大的价值、事实过程中保持幽默和明显的善意、由感染力自然大有裨益。即使最好的创新也需要一点离经叛道才能产生影响：离经叛道的领导力。</li>
<li>一个健康组织所必需的是能够为员工经常性地提供独立的自我评价机会。</li>
<li>为年轻员工清楚讲述合同规则，实际上是给他们机会融入组织。</li>
<li>员工离开的原因主要有过客心态、可被替代感。公司搬迁，会造成人员的流逝。</li>
<li>最优秀的组织会有意识地去追求称为最佳。这样的共同目标提供了一致的方向、合作的满足感和强大的凝聚力。</li>
<li>减员的后果是引入新人上手的时间及成本及原本项目落后的进程成本。</li>
<li>有意识地主动管理人力资本的公司已定会得到长线回报。依靠脑力劳动者的公司必须认识到他们在人力资本上的投资是至关重要的。</li>
</ol>
<p>###高效团队养成</p>
<ol>
<li>一个有凝聚力的团队时一组紧密交织在一起的人，他们的整体大于个体之和。团队都是围绕共同目标成立的。特征包括项目和人物之行过程中的低人员流失率、有很强的自我认知、有一种经营的感觉、对产品有强烈的归属感、对工作乐在其中。</li>
<li>自毁团队的行为：防御式管理、官僚主义、物理分割、时间碎片、牺牲产品质量、伪造截止日期、团伙控制。加班副作用明显。</li>
<li>强调竞争带来的长期影响牺牲的是对健康团队而言必需的简单有效的个体辅导。绩效考核导致竞争和团队自毁。</li>
<li>好的管理者会经常给团队提供机会，让大家来一起享受成功。</li>
<li>敞开和服的态度恰好是防御式管理的反面。用人不疑，你讲他放在这个岗位上，就要信任他，不需要做任何防御。</li>
<li>健康组织构成策略：建立对质量的执著追求、提供诸多满意的闭环、建立精英意识、允许和鼓励差异性、维护和保护成功团队、提供战略而不是战术方向。</li>
</ol>
<p>###沃土</p>
<ol>
<li>不要逃避风险：我们需要澄清项目风险是一件好事情，着说明项目是有价值的。</li>
<li>工作会议的参与者仅局限于利益相关的人，人数越少越好。</li>
<li>开会和演讲都是繁琐的事物，真正的价值体验在那些间隙时间，一段演讲开始或结束等待的公共区、茶歇休息、午餐排队、与其它参会者一起饮茶或聚餐的时间。</li>
<li>终极的管理罪恶是浪费大家的时间。</li>
<li>建立一个少垃圾邮件、自我协调的组织。</li>
<li>混乱是改变的必经阶段，需要小心谨慎改变。除非大家都感到安全，否则就不要发起改变。</li>
<li>能够成功构建社区的组织更能留住人。</li>
</ol>
<p>###快乐地工作</p>
<ol>
<li>工作就应该是快乐的。</li>
<li>建设性地重新引入少量无序：试点项目、战争游戏、头脑风暴、激发性训练、培训、旅游、会议、庆祝和撤退。</li>
</ol>
<p>##作者介绍：<br>Tom DeMarco是结构化分析和设计的创始人之一。Timothy Lister是Atlantic Systems Guild公司首席咨询师。</p>
]]></content>
    
    <summary type="html">
    
      读《人件》的摘录&amp;感想。
    
    </summary>
    
      <category term="books" scheme="http://yoursite.com/categories/books/"/>
    
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《人月神话》读书笔记</title>
    <link href="http://yoursite.com/2016/09/17/%E3%80%8AThe%20Mythical%20Man-Month%E3%80%8B_reading_notes/"/>
    <id>http://yoursite.com/2016/09/17/《The Mythical Man-Month》_reading_notes/</id>
    <published>2016-09-17T06:12:10.000Z</published>
    <updated>2017-02-25T05:33:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>##推荐理由：<br>《人月神话》是软件工程方面的一本经典著作，是一本具有深远影响力和畅销不衰的著作。</p>
<p>作者在书中详细介绍了作者在软件开发管理方面的一系列总结经验，从整个开发团队中应有的角色，包括了项目经理、首席程序设计师、结构师、程序员等，到每个角色的职责，再通过各个角色的职责需要通过更多的交流来更好完成项目引出设计、测试、文档、评审的重要性及注意点，以此囊括了整个软件开发的过程应做的事，以及需要如何做才能更好的完成项目的关键点。不仅如此，在提出自己的每个观点的同时，还会引入实际项目中的成功或失败的案例，经典且具有说服力，有理有据，引人深思。没有银弹那两章更是引起了世界上的巨大反应，详细解释了软件的复杂性、可变性、非一致性、不可见性的根本属性，这些属性导致很难有好方法来大幅度提高软件的生产率、可靠性和简洁程度。对于项目经理、设计师、结构师、编程人员都有着很大的启发，十分认同书中推荐的职责的分离，结构师不应该剥夺编程人员在实现中的创造性，设计整个项目的人就是必须要有统一的认知才行，这些在软件领域的至理都在此书中能够很好的体现出来。</p>
<p>##本书要点：</p>
<ul>
<li>焦油坑：编程系统产品的开发成本是简单的构建程序的9倍，是大多数系统开发的目标，从事编程的人员期望着多种快乐但在过程中同时也会产生苦恼。</li>
<li>人月神话：缺乏合理的时间进度是造成项目滞后的最主要原因，通过人月来估计和进度安排是一种谬误的思考方式。未进度落后的项目增加人手智慧使进度更加落后，会引发额外的沟通工作量。</li>
<li>外科手术队伍：队伍需要有首席程序员、副手、管理员、编辑、两个文秘、程序职员。</li>
<li>贵族专治、民主政治和系统设计：概念完整性使系统设计中最重要的考虑因素，因此设计必须由一个人或者具有共识的小型团队来完成。</li>
<li>画蛇添足：结构师只对实现提出建议，听取结构上改进的建议，需要自律不可过分设计。</li>
<li>贯彻执行：过程为定义规格说明、整合、交流、多重实现、日志记录和整理发布及最后的测试。</li>
<li>为什么巴比伦塔会失败：主要缺乏交流以及交流的结果——组织。</li>
<li>胸有成竹：程序开发随程序规模的大量增长而增长。</li>
<li>削足适履：软件开发人员必须设立规模目标，控制规模和发明一些减少规模的方法，主要来自数据的重新表达。</li>
<li>提纲挈领：软件项目需要对目标、用户手册、内部文档、进度、预算、组织机构图、工作空间分配的一系列文档规范化并进行状态监督和预警机制。</li>
<li>未雨绸缪：用户的实际需要和用户感觉会随着程序的构建、测试和使用而变化，为变更设计系统、计划组织结构和维护是工程师的责任。</li>
<li>干将莫邪：项目经理需要考虑计算机设施、辅助机器和数据服务和高级语言及交互式编程。</li>
<li>整体部分：设计中尽可能方法bug，并且实现中需要有构件单元测试、系统集成调试。</li>
<li>祸起萧墙：里程碑必须是具体的、特定的和可度量的事件，慢性进度偏离会极大降低士气，实现过程中必须有评审机制。</li>
<li>另外一面：面对用户时文档很重要，需要稳步进行文档描述。流程图只有在特定情况下才显得合适，在线系统的高级语言中，自文档化技术很实用。</li>
<li>没有银弹：软件开发的根本困难包括复杂度、非一致性、可变性、不可见性，因此难以在提高软件的生产率、可靠性和简洁程度上取得数量级增长。但是以往已经在高级语言、分时等技术上取得一定的突破，未来还有潜在的多个技术有望成为银弹解决这一问题。</li>
<li>再论“没有银弹”：对于没有银弹的观点进行了论述，并且提出了面向对象编程等技术可能成为“铜质子弹”的观点。</li>
</ul>
<p>##精编书摘：</p>
<p>###焦油坑<br>编程系统产品开发的工作量是供个人使用的、独立开发的构建程序的9倍。我估计软件构件产品引起了3倍工作量，将软件构件整合成完整系统所需要的设计、继承和测试又强加了3倍的工作量，这些高成本的构件在根本上是相互独立的。</p>
<p>###人月神话<br>缺乏合理的时间进度是造成项目滞后的最主要原因，它比其他所有因素的综合影响还大。</p>
<p>所有的编程人员都是乐观主义者，由于编程人员通过纯粹的思维活动俩开发，我们期待在实现过程中不会碰到困难，但是我们的构思本身是有缺陷的，因此总会有bug。</p>
<p>围绕着成本核算的估计技术，混淆了工作量和项目进展。人月是危险和带有欺骗性的神话，因为它暗示人员数量和时间是可以相互替换的。在若干人员中分解任务会引发额外的沟通工作量——培训和相互沟通。</p>
<p><strong><em>Brooks法则：为进度落后的项目增加人手，只会使进度更加落后。</em></strong></p>
<p>###外科手术队伍<br>实际上绝大多数大型编程系统的经验显示，一拥而上的开发方法是高成本、速度缓慢、低效的，开发出的产品无法进行概念上的集成。以为首席程序员、类似于外科手术队伍的团队架构提供了一种方法——既能获得由少数头脑产生的产品完整性，又能得到多位协助人员的总体生产率，还彻底地减少了沟通的工作量。</p>
<p>###贵族专治、民主政治和系统设计<br>在系统设计中，概念的完整性应该是最重要的考虑因素，也就是说为了反映一系列连贯的设计思路，宁可省略一些不规则的特性和改进，也不提倡独立和无法整合的系统。</p>
<p>整个创造性活动包括了三个独立的阶段：体系结构、设计实现、物理实现。在实际情况中，它们往往可以同时开始和并发地进行。</p>
<p>###画蛇添足<br>结构师必须：牢记是开发人员承担创造性和发明行的实现责任，所以结构师只能建议而不能支配；时刻准备着为所制定的说明建议一种实现的方法，同样准备接收其他任何能达到目标的方法；对上述的建议保持低调和不公开；准备放弃坚持所作的改进建议。</p>
<p>###贯彻执行<br>即使是大型的设计团队，设计结果也必须由一个活两个人来完成以确保这些决定是一致的；必须明确定义体系结构中与先前定义不同的地方，重新定义的详细程度应该与原先的说明一致；出于精确性的考虑，我们需要形式化地设计定义，同样我们需要记叙性定义来加深理解；必须采用形式化定义和记叙性定义中的一种作为标准，另一种作为辅助措施；它们都可以作为表达的标准。</p>
<p>###提纲挈领<br>即使是小型项目，项目经理也应该在项目早起对目标、用户手册、内部文档、进度、预算、组织机构图和工作空间分配的一系列文档进行规范化。</p>
<p>###整体部分<br>系统调试相对于单元测试所花费的时间会比预料的长，系统调试的困难程度证明了需要一种完备系统化和可计划的方法。</p>
<p>系统调试仅仅应该在所有部件能够运作之后开始，这既不同于为了查出接口bug所采取的“合在一起尝试”的方法，也不同于在所有构件单元的bug已知但未修复的情况下，即开始系统调试的做法）。</p>
<p>控制变更，受限必须由人负责，接着必须存在系统的受控拷贝。一次仅添加一个构件。</p>
<p>###没有银弹<br>在未来的十年内，无论是在技术还是管理方法上，都看不出任何突破性的进步，能够保证在十年内大幅度地提高软件的生产率 、可靠性和简洁性。</p>
<p>我认为软件开发中困难的部分是规格说明、设计和测试这些概念上的结构，而不是对概念进行表达和对实现逼真程度进行验证。</p>
<p>复杂度，规模上，软件实体可能比任何由人类创造的其他实体更复杂，因为没有任何两个软件部分是相同的。复杂度不仅仅导致技术产生困难，还引发了很多管理上的问题。</p>
<p>可变性，软件实体经常会遭受持续的变更压力。</p>
<p>不可见性，软件是不可见的和无法可视化的，软件的客观存在不具有空间的形体特征。</p>
<p>##作者介绍：<br>Frederick P. Brooks, Jr.曾获美国计算机领域最具声望的图灵奖，美国计算机协会称赞他为“对计算机体系结构、操作系统和软件工程做出了里程碑式的贡献”，曾任职IBM公司。</p>
]]></content>
    
    <summary type="html">
    
      读《人月神话》的摘录&amp;感想。
    
    </summary>
    
      <category term="books" scheme="http://yoursite.com/categories/books/"/>
    
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java Web之Spring+Hibernate的DAO层通用类</title>
    <link href="http://yoursite.com/2016/09/12/hibernate_basedao/"/>
    <id>http://yoursite.com/2016/09/12/hibernate_basedao/</id>
    <published>2016-09-12T12:30:27.000Z</published>
    <updated>2016-09-12T13:09:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>从上一篇的例子中可以看到如果单纯直接写一个dao的话，不仅session难以管理，并且当DAO的数量过于庞大时，代码的重复率过于庞大，那么这时候，建立一个用于维护session并且拥有部分常用功能的基类很重要。当然泛型也可以同样起到这个功能，即对每个Entity都实现一个定义的接口，在泛型的类来维护也是可行的，但我总感觉并没有这个必要。提供一个通用的方法集合就够了。</p>
<h2 id="Step-1-dao包中新建一个interface名为BaseDao"><a href="#Step-1-dao包中新建一个interface名为BaseDao" class="headerlink" title="Step 1: dao包中新建一个interface名为BaseDao"></a>Step 1: dao包中新建一个interface名为BaseDao</h2><p>当然第一步就是创建一个名为BaseDao的interface，代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 16/9/12.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseDao</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 获取session</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Session <span class="title">getSession</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Session <span class="title">getNewSession</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/** 增/删/改/查, 通过hql语句实现 */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getAllListByHQL</span><span class="params">(Class c)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// 根据hql语句来找数量</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">(String hql)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// 根据hql语句找到从start个开始的num个对象</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">findLimitedObjByHQL</span><span class="params">(String hql, <span class="keyword">int</span> start, <span class="keyword">int</span> num)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// 执行hql语句并返回查询对象</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">findAllByHQL</span><span class="params">(String hql)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/* 增/删/改/查, 这部分通过Criteria来实现 */</span></div><div class="line"></div><div class="line">    <span class="comment">// 根据id去对象</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">loadByStringId</span><span class="params">(Class c, String id)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">loadByLongId</span><span class="params">(Class c, Long id)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">loadByIntId</span><span class="params">(Class c, <span class="keyword">int</span> id)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// 从列表中取出从start个开始的num个对象</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">findLimitedObj</span><span class="params">(Class c, <span class="keyword">int</span> start, <span class="keyword">int</span> num)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// 获取所有的对象的列表</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getAllList</span><span class="params">(Class c)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// 获取所有的对象的个数</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalCount</span><span class="params">(Class c)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// 保存对象</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Object bean)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// 更新对象</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Object bean)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// 删除对象</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Object bean)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// 删除对象</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Class c, String id)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Class c, String[] ids)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上，这里前四个方法都是关于管理session的方法，正常情况下，我们使用<code>getSession()</code>方法来用<code>session</code>实现相关功能，而事务的提交是通过<code>hibernate</code>配置时已经配置好的面向切面的事务管理。若是要自己来实现session的提交和关闭，则可以通过<code>getNewSession()</code>来使用。</p>
<p>后面的方法涉及到两种hibernate的实现方式，一种是原始的<code>hql</code>语句来实现，另一种则是通过<code>Criteria</code>来实现。</p>
<h2 id="Step-2-daoImpl包中创建BaseDaoImpl实现BaseDao"><a href="#Step-2-daoImpl包中创建BaseDaoImpl实现BaseDao" class="headerlink" title="Step 2: daoImpl包中创建BaseDaoImpl实现BaseDao"></a>Step 2: daoImpl包中创建BaseDaoImpl实现BaseDao</h2><p>实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> daoImpl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> dao.BaseDao;</div><div class="line"><span class="keyword">import</span> org.hibernate.Criteria;</div><div class="line"><span class="keyword">import</span> org.hibernate.Query;</div><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 16/9/12.</div><div class="line"> */</div><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDaoImpl</span> <span class="keyword">implements</span> <span class="title">BaseDao</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">protected</span> SessionFactory sessionFactory;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     Session相关</div><div class="line">     */</div><div class="line">    <span class="comment">// getCurrentSession 会自动关闭session, 使用的是当前的session事务</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Session <span class="title">getSession</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sessionFactory.getCurrentSession();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// openSession 需要手动关闭session, 该方法直接重新打开一个新的session</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Session <span class="title">getNewSession</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sessionFactory.openSession();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> </span>&#123;</div><div class="line">        getSession().flush();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        getSession().clear();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     HQL语句相关查询</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getAllListByHQL</span><span class="params">(Class c)</span> </span>&#123;</div><div class="line">        String hql = <span class="string">"from "</span> + c.getName();</div><div class="line">        Session session = getSession();</div><div class="line">        <span class="keyword">return</span> session.createQuery(hql).list();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">(String hql)</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        Long count = (Long)session.createQuery(hql).uniqueResult();</div><div class="line">        <span class="keyword">return</span> count != <span class="keyword">null</span> ?count.intValue() : <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">findLimitedObjByHQL</span><span class="params">(String hql, <span class="keyword">int</span> start, <span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        Query query = session.createQuery(hql);</div><div class="line">        query.setFirstResult(start);</div><div class="line">        query.setMaxResults(num);</div><div class="line">        List list = query.list();</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">findAllByHQL</span><span class="params">(String hql)</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        Query query = session.createQuery(hql);</div><div class="line">        List list = query.list();</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     使用Criteria相关操作</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">loadByStringId</span><span class="params">(Class c, String id)</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        <span class="keyword">return</span> session.get(c, id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">loadByLongId</span><span class="params">(Class c, Long id)</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        <span class="keyword">return</span> session.get(c, id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">loadByIntId</span><span class="params">(Class c, <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        <span class="keyword">return</span> session.get(c, id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">findLimitedObj</span><span class="params">(Class c, <span class="keyword">int</span> start, <span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        Criteria criteria = session.createCriteria(c);</div><div class="line">        criteria.setFirstResult(start);</div><div class="line">        criteria.setMaxResults(num);</div><div class="line">        List list = criteria.list();</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getAllList</span><span class="params">(Class c)</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        Criteria criteria = session.createCriteria(c);</div><div class="line">        List list = criteria.list();</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalCount</span><span class="params">(Class c)</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        Criteria criteria = session.createCriteria(c);</div><div class="line">        <span class="keyword">int</span> size = criteria.list().size();</div><div class="line">        <span class="keyword">return</span> size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Object bean)</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        session.save(bean);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Object bean)</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        session.update(bean);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Object bean)</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        session.delete(bean);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Class c, String id)</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        Object obj = session.get(c, id);</div><div class="line">        session.delete(obj);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Class c, String[] ids)</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        <span class="keyword">for</span>(String id : ids) &#123;</div><div class="line">            Object obj = session.get(c, id);</div><div class="line">            <span class="keyword">if</span>(obj != <span class="keyword">null</span>) &#123;</div><div class="line">                session.delete(obj);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面的方法可以看到，凡是用<code>hql</code>语句来查询的，均以<code>String</code>形式来传递<code>hql</code>查询语句，这样做的时间容易引入<strong><code>sql注入</code></strong>的安全问题，因此我觉得在此处除非必要，可以考虑用<code>Criteria</code>的方式来进行操作。</p>
<h2 id="其他DAO的修改"><a href="#其他DAO的修改" class="headerlink" title="其他DAO的修改"></a>其他DAO的修改</h2><p>这里就举上一篇中的<code>MusicDaoImpl</code>吧</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> daoImpl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> dao.BaseDao;</div><div class="line"><span class="keyword">import</span> org.hibernate.Criteria;</div><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</div><div class="line"><span class="keyword">import</span> org.hibernate.criterion.Order;</div><div class="line"><span class="keyword">import</span> org.hibernate.criterion.Restrictions;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> dao.MusicDao;</div><div class="line"><span class="keyword">import</span> model.Music;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 16/9/11.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MusicDaoImpl</span> <span class="keyword">implements</span> <span class="title">MusicDao</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> BaseDao baseDao;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Music <span class="title">getMusicById</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        Music music=(Music)baseDao.loadByLongId(Music.class,id);</div><div class="line">        <span class="keyword">return</span> music;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Music <span class="title">getMusicByName</span><span class="params">(String musicName)</span> </span>&#123;</div><div class="line">        Session session=baseDao.getSession();</div><div class="line">        Criteria criteria=session.createCriteria(Music.class)</div><div class="line">                .add(Restrictions.eq(<span class="string">"musicName"</span>, musicName));</div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        List&lt;Music&gt; results=(List&lt;Music&gt;)criteria.list();</div><div class="line">        <span class="keyword">if</span>(results.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> results.get(<span class="number">0</span>);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Music m)</span> </span>&#123;</div><div class="line">        baseDao.save(m);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> demo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"><span class="keyword">import</span> dao.MusicDao;</div><div class="line"><span class="keyword">import</span> model.Music;</div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 16/9/11.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</div><div class="line">        MusicDao musicDao=context.getBean(MusicDao.class);</div><div class="line">        SimpleDateFormat format=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</div><div class="line"></div><div class="line">        Music music = <span class="keyword">new</span> Music();</div><div class="line">        music.setMusicName(<span class="string">"abc"</span>);</div><div class="line">        music.setPublishTime(format.parse(<span class="string">"2016-09-11"</span>));</div><div class="line">        music.setSinger(<span class="string">"def"</span>);</div><div class="line">        musicDao.save(music);</div><div class="line"></div><div class="line">        Music newMusic = musicDao.getMusicByName(<span class="string">"abc"</span>);</div><div class="line">        System.out.println(<span class="string">"================"</span>);</div><div class="line">        System.out.println(newMusic.getMusicName() + <span class="string">";"</span> + newMusic.getSinger());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如图：<br><img src="/images/hibernate_basedao/hibernate_basedao_result.png" alt="result"></p>
<p>验证正确，因此基本的通用类已经全部完成！</p>
<p>暂时先写到这吧～</p>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了Spring + Hibernate下DAO层的公用类。
    
    </summary>
    
      <category term="Java Web" scheme="http://yoursite.com/categories/Java-Web/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Java Web之配置Spring + Hibernate</title>
    <link href="http://yoursite.com/2016/09/11/java_spring_hibernate/"/>
    <id>http://yoursite.com/2016/09/11/java_spring_hibernate/</id>
    <published>2016-09-11T11:09:09.000Z</published>
    <updated>2016-09-12T12:37:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Step-1-创建java-web的maven工程"><a href="#Step-1-创建java-web的maven工程" class="headerlink" title="Step 1: 创建java web的maven工程"></a>Step 1: 创建java web的maven工程</h2><p>首先创建maven工程，主要模版使用下图所示的maven。</p>
<p><img src="/images/spring_hibernate/create_maven_project1.png" alt="create maven project"></p>
<p>其他group id等自行填写即可。</p>
<p>创建完成后，可以看到默认初始的工程结构：<br><img src="/images/spring_hibernate/initial_struct.png" alt="maven project structure"></p>
<h2 id="Step-2-配置maven依赖"><a href="#Step-2-配置maven依赖" class="headerlink" title="Step 2: 配置maven依赖"></a>Step 2: 配置maven依赖</h2><p>创建完maven工程后，我们打开自带的pom.xml文件，在<code>&lt;dependencies&gt;&lt;dependencies/&gt;</code>之间添加如下依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- spring 框架 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.15.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.15.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.15.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.15.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.15.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- mysql &amp; hibernate --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 将po转为json,便于打印 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- jstl需要的jar包 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- log4j需要的jar包 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其中<code>log4j</code>包用于打印语句至命令行便于调试，<code>fastjson</code>包用于可以直接将po转换为json便于查看内容，<code>jstl</code>便于jsp页面中自定义标签的使用，这三个依赖为可选，其余则为spring+hibernate所必需的。</p>
<h2 id="添加spring-hibernate的配置文件"><a href="#添加spring-hibernate的配置文件" class="headerlink" title="添加spring+hibernate的配置文件"></a>添加spring+hibernate的配置文件</h2><p>在<code>main/resource</code>文件夹下添加一个数据库配置文件，取名为<code>jdbc.properties</code>，内容如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jdbcUrl=jdbc:mysql://your_ip:mysql_port/database_name?autoReconnect=true</div><div class="line">driverClass=com.mysql.jdbc.Driver</div><div class="line">user=mysql_username</div><div class="line">password=mysql_password</div></pre></td></tr></table></figure>
<p>同样在相同目录下添加<code>applicationContext.xml</code>文件，内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></div><div class="line">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">                        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</div><div class="line">                        http://www.springframework.org/schema/context</div><div class="line">                        http://www.springframework.org/schema/context/spring-context-3.0.xsd</div><div class="line">                        http://www.springframework.org/schema/aop</div><div class="line">                        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd</div><div class="line">                        http://www.springframework.org/schema/tx</div><div class="line">                        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"your_package"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbcUrl&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;driverClass&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span> <span class="attr">value</span>=<span class="string">"8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatementsPerConnection"</span> <span class="attr">value</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span> <span class="attr">value</span>=<span class="string">"1800"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate4.LocalSessionFactoryBean"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.cache.use_second_level_cache"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.cache.region.factory_class"</span>&gt;</span>org.hibernate.cache.ehcache.EhCacheRegionFactory<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"packagesToScan"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>your_package<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate4.HibernateTransactionManager"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">isolation</span>=<span class="string">"READ_COMMITTED"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"txPointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* your_package.dao.*.*(..))"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointcut"</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其中只要将配置文件中出现的<code>your_package</code>更改为自己的目录即可。</p>
<p>至此spring+hibernate的配置已经完成。</p>
<h3 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h3><ul>
<li>关于<code>dataSource</code>:</li>
</ul>
<p><code>jdbc.properties</code>中的变量是通过以下命令引入</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>当然，如果<strong>不想创建<code>jdbc.properties</code></strong>文件，则只需要将这句话去掉，并将<code>&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</code>下的<code>&lt;property&gt;</code>标签中<code>value</code>属性中<code>${}</code>的改为<code>jdbc.properties</code>之前配置的值即可。<code>dataSource</code>这个bean本身只是一个数据库连接池，能够定义最大连接数和最小连接数等属性。</p>
<ul>
<li>关于<code>sessionFactory</code></li>
</ul>
<p>sessionFactory是用于产生数据库session，也因此会用到<code>dataSource</code>，后定义了hibernate的部分属性，如使用方言等。</p>
<ul>
<li>关于<code>transaction</code></li>
</ul>
<p>mysql数据库中，有这事务这一概念，我们能够在代码中手动创建事务并提交，但是这有可能会产生大量的重复的代码，而这里spring则为我们提供了配置，能够自动在执行方法前创建事务并在结束时提交，这就是<code>sessionFactory</code>后面的配置文件中配置内容的作用。</p>
<h2 id="代码添加model（即数据库中的一张表）"><a href="#代码添加model（即数据库中的一张表）" class="headerlink" title="代码添加model（即数据库中的一张表）"></a>代码添加model（即数据库中的一张表）</h2><p>创建一个<code>model</code>包，并在其中创建一个类名为<code>Music</code>的类，来显示一首音乐的信息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> javax.persistence.Column;</div><div class="line"><span class="keyword">import</span> javax.persistence.Entity;</div><div class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</div><div class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</div><div class="line"><span class="keyword">import</span> javax.persistence.Id;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 16/9/11.</div><div class="line"> */</div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Music</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(length=<span class="number">64</span>)</div><div class="line">    <span class="keyword">private</span> String musicName;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Date publishTime;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String singer;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMusicName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> musicName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMusicName</span><span class="params">(String musicName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.musicName = musicName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getPublishTime</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> publishTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPublishTime</span><span class="params">(Date publishTime)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.publishTime = publishTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSinger</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> singer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSinger</span><span class="params">(String singer)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.singer = singer;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>下面则添加一个<code>dao</code>包，用于数据库接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> model.Music;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 16/9/11.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MusicDao</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Music <span class="title">getMusicById</span><span class="params">(Long id)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> Music <span class="title">getMusicByName</span><span class="params">(String musicName)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Music m)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>下面添加一个<code>daoImpl</code>包用于实现上述定义的数据库接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.hibernate.Criteria;</div><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</div><div class="line"><span class="keyword">import</span> org.hibernate.criterion.Order;</div><div class="line"><span class="keyword">import</span> org.hibernate.criterion.Restrictions;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> dao.MusicDao;</div><div class="line"><span class="keyword">import</span> model.Music;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 16/9/11.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MusicDaoImpl</span> <span class="keyword">implements</span> <span class="title">MusicDao</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> SessionFactory sessionFactory;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Music <span class="title">getMusicById</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        Session session=sessionFactory.getCurrentSession();</div><div class="line">        Music music=(Music)session.get(Music.class,id);</div><div class="line">        <span class="keyword">return</span> music;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Music <span class="title">getMusicByName</span><span class="params">(String musicName)</span> </span>&#123;</div><div class="line">        Session session=sessionFactory.getCurrentSession();</div><div class="line">        Criteria criteria=session.createCriteria(Music.class)</div><div class="line">                .add(Restrictions.eq(<span class="string">"musicName"</span>, musicName))</div><div class="line">                .addOrder(Order.asc(<span class="string">"time"</span>));</div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        List&lt;Music&gt; results=(List&lt;Music&gt;)criteria.list();</div><div class="line">        <span class="keyword">if</span>(results.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> results.get(<span class="number">0</span>);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Music m)</span> </span>&#123;</div><div class="line">        Session session=sessionFactory.getCurrentSession();</div><div class="line">        session.saveOrUpdate(m);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中<code>@Repository</code>这个注解用于表明此类是一个DAO。</p>
<hr>
<p>下面则写用于测试的类:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"><span class="keyword">import</span> dao.MusicDao;</div><div class="line"><span class="keyword">import</span> model.Music;</div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhongyq on 16/9/11.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</div><div class="line">        MusicDao musicDao=context.getBean(MusicDao.class);</div><div class="line">        SimpleDateFormat format=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</div><div class="line"></div><div class="line">        Music music = <span class="keyword">new</span> Music();</div><div class="line">        music.setMusicName(<span class="string">"abc"</span>);</div><div class="line">        music.setPublishTime(format.parse(<span class="string">"2016-09-11"</span>));</div><div class="line">        music.setSinger(<span class="string">"def"</span>);</div><div class="line">        musicDao.save(music);</div><div class="line"></div><div class="line">        Music newMusic = musicDao.getMusicByName(<span class="string">"abc"</span>);</div><div class="line">        System.out.println(newMusic.getMusicName() + <span class="string">";"</span> + newMusic.getSinger());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>显示结果如下图：</p>
<p><img src="/images/spring_hibernate/hibernate_result.png" alt="hibernate result"></p>
<p>说明成功！</p>
<p>暂时先写到这吧～</p>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了通过Eclipse/IntelliJ IDEA创建一个maven工程，使用spring+hibernate的框架实现一个java web项目。
    
    </summary>
    
      <category term="Java Web" scheme="http://yoursite.com/categories/Java-Web/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="hibernate" scheme="http://yoursite.com/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>数据挖掘简介</title>
    <link href="http://yoursite.com/2016/09/08/data_mining_introduction/"/>
    <id>http://yoursite.com/2016/09/08/data_mining_introduction/</id>
    <published>2016-09-08T06:17:44.000Z</published>
    <updated>2016-09-08T08:12:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Data-Mining-Introduction"><a href="#Data-Mining-Introduction" class="headerlink" title="Data Mining Introduction"></a>Data Mining Introduction</h2><h3 id="Why-Data-Mining"><a href="#Why-Data-Mining" class="headerlink" title="Why Data Mining?"></a>Why Data Mining?</h3><ul>
<li><p>Science</p>
<ul>
<li>Data collected and stored at enormous speeds(GB/hour)<ul>
<li>Remote sensors on a satellite</li>
<li>Telescopes scanning the skies</li>
<li>Microarrays generating gene expression</li>
<li>Scientific simulations generating terabytes of data</li>
</ul>
</li>
<li>Traditional techniques infeasible for raw data</li>
<li>Data mining helps scientists<ul>
<li>Classifying and segmenting data</li>
<li>Hypothesis formation</li>
</ul>
</li>
</ul>
</li>
<li><p>Industry</p>
<ul>
<li>Lots of data is being collected and put into data warehouses<ul>
<li>Sales transactions</li>
<li>Stock trading records</li>
<li>Product descriptions</li>
<li>Sales promotions</li>
<li>Customer feedbacks</li>
</ul>
</li>
<li>Computers are cheap and powerful</li>
<li>Competitive Pressure is Strong</li>
</ul>
</li>
<li><p>Data mining turns a large collection of data into knowledge</p>
</li>
</ul>
<hr>
<h3 id="What-is-Data-Mining"><a href="#What-is-Data-Mining" class="headerlink" title="What is Data Mining?"></a>What is Data Mining?</h3><ul>
<li><p>Many Definitions</p>
<ul>
<li>Non-trivial extraction of implicit, previously unknown and useful information from data</li>
<li>Exploration &amp; analysis, by automatic or semi-automatic means, of large quantities of data in order to discover meaningful patterns</li>
</ul>
</li>
<li><p>Data Mining: process of semi-automatically analyzing large databases to find patterns that are:</p>
<ul>
<li>Valid: hold on new data with some certainty</li>
<li>Novel: non-obvious to the system</li>
<li>Useful: should be possible to act on the item</li>
<li>Understandable: humans should be able to interpret the pattern</li>
</ul>
</li>
</ul>
<hr>
<h3 id="What-Kinds-of-Data-Can-be-Mined"><a href="#What-Kinds-of-Data-Can-be-Mined" class="headerlink" title="What Kinds of Data Can be Mined"></a>What Kinds of Data Can be Mined</h3><ul>
<li><p>Database Data</p>
<ul>
<li>A relational database is a collection of tables, each consists of a set of attributes (columns or fields), and usually stores a large set of tuples.</li>
<li><p>Using relational query language (SQL), youcan ask things like:</p>
<ul>
<li>show me a list of all items that were sold in the last quarter?</li>
<li>…</li>
</ul>
</li>
<li><p>We can go further by searching for trends or data patterns</p>
<ul>
<li>Analyze customer data to predict the credit risk of new customers based on their income, age, and previous credit information.</li>
</ul>
</li>
<li><p>Data Warehouses</p>
<ul>
<li>combination with many databases.</li>
<li>many data sources –&gt; (Clean/Integrate/Transform/Load/Refresh) –&gt; Data Warehouse –&gt; (query) –&gt; clients</li>
<li>Note: 讲道理，就是在多个数据库当中根据维度切割出有用的部分，（见商务智能四方体模型，两种方式：Drill-down（切割／裁剪数据）/Roll-up（拼接））</li>
</ul>
</li>
<li><p>Transaction Data</p>
<ul>
<li>A special type of record data, where <ul>
<li>Each record (transaction) involves a set of items.</li>
</ul>
</li>
</ul>
</li>
<li><p>Spatial-Temporal Data(时空数据？）</p>
<ul>
<li>Average Monthly Temperature of land and ocean</li>
</ul>
</li>
<li><p>Each document becomes a “term” vector</p>
<ul>
<li>Each term is a component (attribute) of the vector</li>
<li>The value of each component is the number of times the corresponding term occurs in the document.</li>
</ul>
</li>
<li><p>Graph and networked data</p>
<ul>
<li>Hyperlink graph</li>
<li>Social and information networks</li>
</ul>
</li>
<li><p>Hypertext and multimedia data</p>
<ul>
<li>Text, image, video, and audio data</li>
</ul>
</li>
<li><p>Time-related sequence data (按照时间可以发现趋势图？）</p>
<ul>
<li>Historical records</li>
<li>Stock exchange data</li>
<li>Time-series</li>
<li>Biological sequence data</li>
</ul>
</li>
<li><p>Data Stream</p>
<ul>
<li>Video surveillance</li>
<li>Sensor data</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h3 id="Analysis-Methods"><a href="#Analysis-Methods" class="headerlink" title="Analysis Methods:"></a>Analysis Methods:</h3><ul>
<li><p>Class/Concept Description: Characterization and Discrimination</p>
<ul>
<li><p>Data entries can be associated with classes or concepts</p>
<ul>
<li>Classes of items for sale include computers &amp; printers</li>
<li>Concepts of customers include bigSpenders and budgetSpenders</li>
</ul>
</li>
<li><p>It is useful to describe individual classes/concepts in summary</p>
</li>
<li><p>Data Characterization:</p>
<ul>
<li>Tools: Statistical measures and plots（统计学方法，不对数据处理仅进行统计分析）</li>
<li>Outputs: Pie charts, bar charts, curves, multi-dimensional data cubes, and multi-dimensional tables, generalized relations</li>
</ul>
</li>
<li><p>Data Discrimination（对比数据，获得可区分的内容）</p>
<ul>
<li>Comparison of the general features of the target class data objects against the general features of objects from one or multiple contrasting classes</li>
<li>Outputs: comparative measures that help to distinguish between the target and contrasting classes</li>
</ul>
</li>
</ul>
</li>
<li><p>Mining Frequent Patterns, Associations and Correlations (ex. 啤酒＋尿布／面包＋奶油；在高频数据中找关联）</p>
<ul>
<li>A frequent item set typically refers to a set of items that often appear together in a transactional dataset</li>
<li>Mining frequent patterns leads to the discovery of interesting associations and correlations within data.</li>
</ul>
</li>
<li><p>Classification and Regression for Predictive Analysis</p>
<ul>
<li>Classification<ul>
<li>Training data: data objects with class labels are known（根据已知属性来归类？类似于根据Sports/Entertainment/Medical等区别来分班级？神经网络？）</li>
<li>Output: Find a model that describes and distinguishes data classes or concepts</li>
</ul>
</li>
<li>Regression Analysis（回归算法？）<ul>
<li>Regression models continuous-valued functions</li>
</ul>
</li>
</ul>
</li>
<li><p>Cluster Analysis（聚类算法？找类）</p>
<ul>
<li>Points (objects) that are “close” in the attribute (feature) space are assigned to the same cluster</li>
</ul>
</li>
</ul>
<ul>
<li><p>Outlier Analysis（找类之外的奇怪的点，感觉就是聚类算法的对立点？）</p>
<ul>
<li>in some applications such as fraud detection, the rare events can be more interesting than the more regularly occurring ones. The analysis of outlier data is referred to as outlier analysis or anomaly ming.</li>
<li>Outliners may be detected using statistical tests, or using distance measures.</li>
</ul>
</li>
<li><p>Meaningfulness of Answers</p>
<ul>
<li>A big data-mining risk is that you will “discover” patterns that are meaningless</li>
<li>Bonferroni’s principle: (roughly) if you look in more places for interesting patterns than your amount of data will support, you are bound to find bogus（虚假的）.</li>
<li>Are all patterns interesting? What makes a pattern interesting?<ul>
<li>Valid: hold on new data with some certainty</li>
<li>Novel: non-obvious to the system</li>
<li>Useful: should be possible to act on the item</li>
<li>Understandable: humans should be able to interpret the pattern</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h3><p>buy computer -&gt; buy software</p>
<p>support = 4% ==&gt; confidence = 50%</p>
<p><strong>支持度 &amp; 置信度： 怎么算？ TODO</strong></p>
<hr>
<h3 id="Which-technologies-are-used"><a href="#Which-technologies-are-used" class="headerlink" title="Which technologies are used?"></a>Which technologies are used?</h3><ul>
<li><p>Data mining make use of technologies from machine learning, statistics, artificial intelligence, databases, visualization bu..</p>
<ul>
<li>Scalability of number of features and instances</li>
<li>Stress on algorithms and architectures(from statical &amp; machine learning)</li>
<li>Automation for handling large, heterogeneous data</li>
</ul>
</li>
<li><p>Statistics</p>
<ul>
<li>Statistical descriptions</li>
<li>Inferential statistics(predictive statistics)</li>
<li>Statistical Hypothesis Testing</li>
<li>a trivial task(applying statistical methods in data mining)<ul>
<li>how to scale up a statistical method over a large data set</li>
<li>how to perform statistical methods in real time(online tasks)</li>
</ul>
</li>
</ul>
</li>
<li><p>Machine Learning</p>
<ul>
<li>Problems:<ul>
<li>Supervised learning</li>
<li>Unsupervised learning</li>
<li>Semi-supervised learning</li>
<li>Active Learning</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h3 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h3><ul>
<li><p>Web Mining:</p>
<ul>
<li>Decide the importance of pages: PageRank algorithm</li>
</ul>
</li>
<li><p>Decisions involving judgment</p>
<ul>
<li>Decide whether to lend you money</li>
<li>Apply data mining and machine learning<ul>
<li>Example: loan decision? training data: about attributes from questionnaire, classification rules help make decision.</li>
</ul>
</li>
<li>Market and Sales<ul>
<li>Customer loyalty</li>
<li>Advertising<ul>
<li>Detecting patterns of behavior(benefit from new services)</li>
<li>指导生产</li>
</ul>
</li>
<li>Markey-basket analysis</li>
</ul>
</li>
</ul>
</li>
<li><p>Other applications</p>
<ul>
<li>Medicine</li>
<li>Molecular/Pharmaceutical</li>
<li>Scientific data analysis</li>
</ul>
</li>
</ul>
<hr>
<h3 id="Major-Issues-in-Data-Mining"><a href="#Major-Issues-in-Data-Mining" class="headerlink" title="Major Issues in Data Mining"></a>Major Issues in Data Mining</h3><ul>
<li>Mining Methodology</li>
<li>User Interaction</li>
<li>Efficiency and Scalability</li>
<li>Diversity of Database Types</li>
<li>Data Mining and Society</li>
</ul>
]]></content>
    
    <summary type="html">
    
      本文主要简单简单介绍了数据挖掘的相关定义基础，当作课堂笔记。
    
    </summary>
    
      <category term="Data Mining" scheme="http://yoursite.com/categories/Data-Mining/"/>
    
    
      <category term="Data Mining" scheme="http://yoursite.com/tags/Data-Mining/"/>
    
      <category term="数据挖掘" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫（二）—— 使用requests类库进行简单的爬取网页</title>
    <link href="http://yoursite.com/2016/09/07/requests/"/>
    <id>http://yoursite.com/2016/09/07/requests/</id>
    <published>2016-09-07T11:14:37.000Z</published>
    <updated>2016-09-07T14:16:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>前阶段从零开始学习了使用python来进行爬虫的开发，遇到了很多坑爹问题。</p>
<h2 id="requests类库"><a href="#requests类库" class="headerlink" title="requests类库"></a>requests类库</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul>
<li>get/post/put/delete/options/head请求：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"><span class="comment"># get请求</span></div><div class="line">request = requests.get(url)</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">post请求：</div><div class="line">request = requests.post(url)</div><div class="line">其他同理</div><div class="line">'''</div></pre></td></tr></table></figure>
<ul>
<li>get/post请求后的常用参数<ul>
<li>header(设置发送请求的请求头）</li>
<li>timeout</li>
<li>params（设置发送请求的参数）</li>
<li>allow_redirects（是否要获取到最终到达的url的request）</li>
<li>stream（是否要获取原始嵌套字）</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line">url = targer_url</div><div class="line">params = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: <span class="string">'value2'</span>&#125;</div><div class="line"><span class="comment"># 请求头</span></div><div class="line">headers = &#123;</div><div class="line">    <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.99 Safari/537.36'</span></div><div class="line">&#125;</div><div class="line">＃ 超时设置(以秒为单位）</div><div class="line">timeout = <span class="number">30</span></div><div class="line">allow_redirects = <span class="keyword">True</span></div><div class="line">request = requests.get(url, headers=headers, timeout=timeout, allow_redirects=allow_redirects, params=params)</div></pre></td></tr></table></figure>
<ul>
<li>requests.get/post返回对象</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line">request = requests.get(url)</div><div class="line"><span class="string">'''</span></div><div class="line">这里说明的方法为request变量</div><div class="line">'''</div><div class="line"><span class="comment"># 请求的完整url，此处会将get请求的参数也添加到url后方</span></div><div class="line">request_url = request.url</div><div class="line"><span class="comment"># 请求状态码</span></div><div class="line">request_code = request.status_code</div><div class="line"><span class="comment"># 返回的正文</span></div><div class="line">request_content = request.content</div><div class="line"><span class="comment"># 编码</span></div><div class="line">request_encoding = request.encoding</div><div class="line"><span class="comment"># 头</span></div><div class="line">request_header = request.header</div></pre></td></tr></table></figure>
<h3 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h3><p>requests本身不难，但是有一点非常坑的是它的编码问题，看两个例子即可</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="comment"># 设置请求头</span></div><div class="line">headers = &#123;</div><div class="line">    <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.99 Safari/537.36'</span></div><div class="line">&#125;</div><div class="line"><span class="comment"># 发送请求</span></div><div class="line">request = requests.get(<span class="string">"http://software.nju.edu.cn"</span>, headers=headers)</div><div class="line"><span class="comment"># 打印响应</span></div><div class="line"><span class="keyword">print</span> request.content</div></pre></td></tr></table></figure>
<p>如下为结果：</p>
<p><img src="/images/requests/software_nju_edu_cn_response.png" alt="response from software.nju.edu.cn"></p>
<p>可以发现此时的中文仍然是正确的中文，编码方式为utf-8，此时并没有问题，然而当尝试了一下<strong>www.sohu.com</strong>，如下为结果</p>
<p><img src="/images/requests/sohu_response.png" alt="response from sohu.com"></p>
<p>是的！没错！中文显示为乱码了！图中红色框中的即为原因，sohu的主页的编码是用GBK！而requests类库从说明中可以发现应该能够自动识别编码，但是却识别不出来GBK，这是为什么呢？尝试了下<code>print request.encoding</code>发现打印出来的编码为<code>ISO-8859-1</code>，果然发现解析的编码并不是<code>GBK</code>！在查询了资料过后终于发现原来可以这样手动指定编码方式：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">request.encoding = GB2312</div><div class="line"><span class="keyword">print</span> request.content</div></pre></td></tr></table></figure>
<p>是的你没有看错，就是<code>GB2312</code>而不是<code>GBK</code>，应该是规定了编码的写法，添加过后会发现中文恢复了正常。那么问题又来了，在requests.get(url)之前我们又怎么能知道该url的编码方式呢？</p>
<ul>
<li>一种方式为直接获取<code>meta</code>标签，获取其中的charset属性，然后如果为<code>GBK</code>编码的话则修改为<code>GB2312</code>，这也是大多数网站教程上的做法，当然是正确的，但是略显麻烦。</li>
<li>那么就有了下面始终方式：经过自我的尝试，针对<code>GBK</code>编码方式，我们能够使用<strong><code>request.encoding = None</code></strong>，是的你没看错，直接情况requests类库的自识别编码方式即可！</li>
</ul>
<p>至此编码方式解决。</p>
<h3 id="requests-header-url"><a href="#requests-header-url" class="headerlink" title="requests.header(url)"></a>requests.header(url)</h3><p>在网站检查中对于环链的检测最容易做法便是通过requests.header请求，只获取响应头就可知道该链接是否可正常访问，效率比之get/post请求快很多。</p>
<h2 id="BeautifulSoup4类库"><a href="#BeautifulSoup4类库" class="headerlink" title="BeautifulSoup4类库"></a>BeautifulSoup4类库</h2><p>这是Python解析html/xml等格式编码的最常用的类库了，十分类似于java中的jsoup。</p>
<h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line">request = requests.get(<span class="string">"http://software.nju.edu.cn"</span>)</div><div class="line"><span class="comment"># 如果请求成功</span></div><div class="line"><span class="keyword">if</span> request != null <span class="keyword">and</span> request.status_code == <span class="number">200</span>:</div><div class="line">	<span class="comment"># 正文内容</span></div><div class="line">	request.encoding = <span class="keyword">None</span></div><div class="line">	content = request.content</div><div class="line">	<span class="comment"># 初始化BeautifulSoup</span></div><div class="line">	soup = BeautifulSoup(content, <span class="string">'html.parser'</span>)</div></pre></td></tr></table></figure>
<p>如上即获取到了BeautifulSoup的实例，可以通过BeautifulSoup进行标签的分析，此处较为简单，详情可以参考BeautifulSoup的<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/" target="_blank" rel="external">说明网站</a></p>
<h2 id="附录：爬虫系统中可能用到的一些方法"><a href="#附录：爬虫系统中可能用到的一些方法" class="headerlink" title="附录：爬虫系统中可能用到的一些方法"></a>附录：爬虫系统中可能用到的一些方法</h2><h3 id="url拼接"><a href="#url拼接" class="headerlink" title="url拼接"></a>url拼接</h3><p>很多编程语言中都有url的拼接，大多有像js中的<code>url.resolve(new_url)</code>这类方法，但是python中并没有自带的这种方法，因此这也是中很坑爹的情况，特别是当我们需要爬深度为n(n&gt;=2)的时候，我们需要首先从首页的<code>&lt;a&gt;</code>标签开始爬，然后再爬所有获取到的<code>&lt;a&gt;</code>标签中的链接。这标签链接有完整的绝对路径，也有相对路径，那么python到底怎么才能拼接url，实现类似<code>resolve</code>方法呢？经过多方查询资料和尝试，终于发现网上有个方法较为成功：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">resolve</span><span class="params">(base, url)</span>:</span></div><div class="line">    url1 = urljoin(base, url)</div><div class="line">    arr = urlparse(url1)</div><div class="line">    path = normpath(arr[<span class="number">2</span>])</div><div class="line">    <span class="keyword">return</span> urlunparse((arr.scheme, arr.netloc, path, arr.params, arr.query, arr.fragment))</div></pre></td></tr></table></figure>
<p>然而这个方法也是有漏洞的。若resolve方法中的两个参数分别为：base是完整的路径（比如<code>http://aaa/bbb/ccc.html</code>，url是相对路径（比如 <code>./ddd/eee/fff.html</code>)，当然这种情况下是正确的，但是！如果base是<code>http://aaa/bbb/ccc.html/</code>，对，只是末尾多了一个’/‘，但是结果却是不同的，所以最好的方法还要检测一下是否末尾有’/‘这个问题。</p>
<h2 id="获取域名"><a href="#获取域名" class="headerlink" title="获取域名"></a>获取域名</h2><p>域名也是很常用的一个属性，能够判断是否同源等，因此这边写出获取域名的方法，比较容易。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUrlDomain</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">    <span class="keyword">if</span> len(url) == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    pattern = re.compile(<span class="string">r'^http(s)?://'</span>)</div><div class="line">    res = re.sub(pattern, <span class="string">''</span>, url)</div><div class="line">    res = re.sub(re.compile(<span class="string">r'/(\S)*'</span>), <span class="string">''</span>, res)</div><div class="line">    <span class="keyword">return</span> res</div></pre></td></tr></table></figure>
<p>暂时先写到这了～</p>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了使用python requests类库进行请求并使用BeautifulSoup4类库进行正文检测。
    
    </summary>
    
      <category term="Python爬虫" scheme="http://yoursite.com/categories/Python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python2.7" scheme="http://yoursite.com/tags/python2-7/"/>
    
      <category term="CentOS" scheme="http://yoursite.com/tags/CentOS/"/>
    
      <category term="python requests" scheme="http://yoursite.com/tags/python-requests/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫（一）—— 配置服务器</title>
    <link href="http://yoursite.com/2016/09/05/server-initialize/"/>
    <id>http://yoursite.com/2016/09/05/server-initialize/</id>
    <published>2016-09-05T10:10:10.000Z</published>
    <updated>2017-03-08T05:48:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CentOS服务器初始配置"><a href="#CentOS服务器初始配置" class="headerlink" title="CentOS服务器初始配置"></a>CentOS服务器初始配置</h2><h3 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h3><p>此次服务器购买了阿里云上的最基本的服务器配置：</p>
<ul>
<li>500G数据盘</li>
<li>4G内存，4M带宽</li>
<li>64位CentOS 6.5（听说这个版本最常用？）</li>
</ul>
<p>正常的小项目已经够用了。</p>
<p>购买完毕后就能使用购买时自己配置的root帐号登录了！</p>
<h3 id="登录服务器"><a href="#登录服务器" class="headerlink" title="登录服务器"></a>登录服务器</h3><p>首先可以用root帐号登录，在命令行中通过ssh指令登录：</p>
<p><code>bash
ssh root@your_ip</code></p>
<p>输入密码后即可登录入系统</p>
<h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>显然是用root用户登录并运行程序虽然方便但却是不安全的，很容易造成系统的崩坏，所以创建一个用户是有必要的，该用户只有在需要的时候才使用sudo权限的命令。</p>
<p>创建用户的命令：<br><code>bash
useradd your_username</code></p>
<p>为该用户添加密码：<br><code>bash
passwd your_username</code></p>
<p>此时已经完成添加用户，并且该用户的根目录在/home/your_username中，但此时该用户没有root权限，因此我们也需要配置该用户的权限。</p>
<p>配置用户权限的文件在 <strong>/etc/sudoers</strong> 文件中，但可以发现如果直接通过vi命令打开sudoers文件时是无权修改的，该文件默认的权限为440，此时你需要通过chmod命令修改sudoers的写入权限，具体如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod 777 /etc/sudoers</div><div class="line">vi /etc/sudoers</div></pre></td></tr></table></figure>
<p>之后找到 <strong>Allow root to run any commands anywhere</strong> 下面，在<br><code>root    ALL=(ALL)    ALL</code><br>后添加一行<br><code>your_username    ALL=(ALL)    ALL</code></p>
<p>最后将sudoers文件的权限更改回去：<br><code>chmod 440 /etc/sudoers</code></p>
<p>此时，your_username这个用户已经有了sudo的权限啦！<br>从此除非必要，从你电脑的命令行可以用your_username这个用户通过ssh登录了，即:<br><code>ssh your_username@your_ip</code></p>
<h2 id="配置Python环境"><a href="#配置Python环境" class="headerlink" title="配置Python环境"></a>配置Python环境</h2><h3 id="管理包"><a href="#管理包" class="headerlink" title="管理包"></a>管理包</h3><p>CentOS中自带<code>yum</code><br>命令来管理 <em>.rpm</em> 的包，可以通过</p>
<p><code>(sudo) yum list</code></p>
<p>来查看。</p>
<h3 id="Python-2-7"><a href="#Python-2-7" class="headerlink" title="Python 2.7"></a>Python 2.7</h3><p>CentOS 6.5系统自带的是Python 2.6.6，而本次项目需要Python2.7，但悲剧地发现<code>yum</code>中并没有Python 2.7，因此我们只能采取源码安装。</p>
<p>Python中有很重要的一个一个指令是<code>pip</code>指令，该指令能够十分方便的安装python包，<strong>但是这边有个大坑：</strong>必须先通过yum安装一些python依赖包，<strong>yum在python2.7的时候是不能用的</strong>，按照大部分教程装完python2.7后直接软链替换掉自带的python2.6后就用不了yum了！如此在之后装pip和setuptools的时候会报错！！！</p>
<p>以下为亲测正确的步骤：</p>
<ul>
<li>通过<code>yum</code>安装相关需要的包:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">yum groupinstall <span class="string">"Development tools"</span></div><div class="line">yum install zlib-devel</div><div class="line">yum install bzip2-devel</div><div class="line">yum install openssl-devel</div><div class="line">yum install sqlite-devel</div></pre></td></tr></table></figure>
<ul>
<li>下载python2.7.10源码:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget http://python.org/ftp/python/2.7.10/Python-2.7.10.tar.xz</div><div class="line">tar -xf Python-2.7.10.tar.xz</div></pre></td></tr></table></figure>
<ul>
<li>编译安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> Python-2.7.10</div><div class="line">./configure --prefix=/usr/<span class="built_in">local</span> <span class="comment">#此为安装地址</span></div><div class="line">make &amp;&amp; make altinstall</div></pre></td></tr></table></figure>
<ul>
<li>软链接替换默认python版本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -sb /usr/<span class="built_in">local</span>/bin/python2.7 /usr/bin/python</div></pre></td></tr></table></figure>
<p>NOTE: 至此Python2.7.10安装完成，但是有一点不好的是<strong>yum无法使用了</strong>，要避免这一点，创建软链接的时候不要替换/usr/bin/python，而链接到其他的一个python27，如此需要实用python2.7的时候命令行的代码更改为<code>python27</code></p>
<ul>
<li>查看版本</li>
</ul>
<p>如果创建并替换了软链接则使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python --version</div></pre></td></tr></table></figure></p>
<p>如果没有原始python的软链接，而软链接到了/usr/bin/python27的话使用：<br><code>python27 --version</code></p>
<h3 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h3><p>在上已经介绍了python的pip的作用，话不多说直接安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">easy_install pip</div></pre></td></tr></table></figure>
<p>当然这很有可能会出现一个问题就是<code>easy_install</code>指令很可能仍旧对应的是<strong>python2.6.6</strong>的版本，因此需要将easy_install指令也重新链接一下，链接指令类似python，在此不再赘述。</p>
<p>此处我们直接使用源码安装，pip的安装还需要<strong>setuptools</strong>,因此首先下载setuptools及pip的源码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://pypi.python.org/packages/d3/16/21cf5dc6974280197e42d57bf7d372380562ec69aef9bb796b5e2dbbed6e/setuptools-20.10.1.tar.gz</div><div class="line">wget --no-check-certificate https://pypi.python.org/packages/41/27/9a8d24e1b55bd8c85e4d022da2922cb206f183e2d18fee4e320c9547e751/pip-8.1.1.tar.gz</div></pre></td></tr></table></figure>
<p>之后使用<code>tar -xf</code>命令解压后使用python安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python setup.py install</div></pre></td></tr></table></figure>
<p>之后需要同python一样建立软链接才能正常使用<code>pip</code>指令: </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln <span class="_">-s</span> /usr/<span class="built_in">local</span>/bin/pip /usr/bin/pip</div></pre></td></tr></table></figure>
<p>最后更新pip即可:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install --upgrade pip</div></pre></td></tr></table></figure>
<h2 id="常用Python类库"><a href="#常用Python类库" class="headerlink" title="常用Python类库"></a>常用Python类库</h2><h3 id="Django框架"><a href="#Django框架" class="headerlink" title="Django框架"></a>Django框架</h3><p>一个轻量级python web开发框架</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install django==1.5</div></pre></td></tr></table></figure>
<h3 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h3><p>发送请求所需要的包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install requests</div></pre></td></tr></table></figure>
<h3 id="simplejson"><a href="#simplejson" class="headerlink" title="simplejson"></a>simplejson</h3><p>对象格式化成json</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install simplejson</div></pre></td></tr></table></figure>
<h3 id="beautifulsoup-4"><a href="#beautifulsoup-4" class="headerlink" title="beautifulsoup 4"></a>beautifulsoup 4</h3><p>解析html/xml格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install bs4</div></pre></td></tr></table></figure>
<h3 id="xmltodict"><a href="#xmltodict" class="headerlink" title="xmltodict"></a>xmltodict</h3><p>解析xml格式，直接形成json</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install xmltodict</div></pre></td></tr></table></figure>
<h3 id="pillow"><a href="#pillow" class="headerlink" title="pillow"></a>pillow</h3><p>图像处理库，截图等可以使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install pillow</div></pre></td></tr></table></figure>
<h3 id="python-nmap"><a href="#python-nmap" class="headerlink" title="python-nmap"></a>python-nmap</h3><p>扫描端口使用的类库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install python-nmap</div></pre></td></tr></table></figure>
<p><strong>NOTE: 大坑！仅仅安装这个，会在运行时报错！原因时找不到类库使用到的nmap指令，使用了网上各大方法竟然还是失败了，然而突然发现还有一个类库叫nmap，会自动配置一个nmap指令！！！</strong>安装nmap后才不会报错，因此还需要一下命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install nmap</div></pre></td></tr></table></figure>
<p>至此最最基本的python的服务器和爬虫所需类库配置完毕</p>
<h2 id="附录：MAC下的环境配置"><a href="#附录：MAC下的环境配置" class="headerlink" title="附录：MAC下的环境配置"></a>附录：MAC下的环境配置</h2><h3 id="Python2-7"><a href="#Python2-7" class="headerlink" title="Python2.7"></a>Python2.7</h3><p>由于MacOS 自带的是python2.7，因此可以直接忽略～</p>
<h3 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h3><p><code>brew</code>指令对于mac来说是个神器，基本可以安装大部分的软件和类库，使用以下指令安装:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure>
<h3 id="pip-1"><a href="#pip-1" class="headerlink" title="pip"></a>pip</h3><p>直接<code>sudo easy_install pip</code>即可</p>
<h3 id="类库"><a href="#类库" class="headerlink" title="类库"></a>类库</h3><p>同CentOS中pip安装即可，特别说明python-nmap包，可以直接使用<code>brew install nmap</code>完成！</p>
<p>暂时先写到这吧～！</p>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了服务器上运行python的一些基本配置，python版本为2.7.10，服务器版本为CentOS 6.5.
    
    </summary>
    
      <category term="Python爬虫" scheme="http://yoursite.com/categories/Python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python2.7" scheme="http://yoursite.com/tags/python2-7/"/>
    
      <category term="CentOS" scheme="http://yoursite.com/tags/CentOS/"/>
    
      <category term="MacOS" scheme="http://yoursite.com/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>服务器上配置shadowsocks</title>
    <link href="http://yoursite.com/2016/05/14/server_shadowsocks/"/>
    <id>http://yoursite.com/2016/05/14/server_shadowsocks/</id>
    <published>2016-05-13T16:29:20.000Z</published>
    <updated>2017-02-27T09:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Step-0-查看shadowsocks的wiki"><a href="#Step-0-查看shadowsocks的wiki" class="headerlink" title="Step 0: 查看shadowsocks的wiki"></a>Step 0: 查看shadowsocks的wiki</h2><p><a href="https://github.com/shadowsocks/shadowsocks/tree/master" target="_blank" rel="external">shadowsocks</a>，可以查看到所有的详细情况及配置情况，这里只是简单记录下自己配置的步骤。</p>
<h2 id="Step-1-购买一个国外的服务器"><a href="#Step-1-购买一个国外的服务器" class="headerlink" title="Step 1: 购买一个国外的服务器"></a>Step 1: 购买一个国外的服务器</h2><p>首先我们需要一个服务器，这里我们使用<a href="https://www.digitalocean.com/" target="_blank" rel="external">digitalocean</a>上的服务器，我们选择Ubuntu 16.01 当然 CentOs也可以。当然也可以选择aws等其他服务器。</p>
<h2 id="Step-2-通过ssh登录服务器"><a href="#Step-2-通过ssh登录服务器" class="headerlink" title="Step 2: 通过ssh登录服务器"></a>Step 2: 通过ssh登录服务器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh root@your_ip</div></pre></td></tr></table></figure>
<h2 id="Step-3-安装shadowsocks"><a href="#Step-3-安装shadowsocks" class="headerlink" title="Step 3: 安装shadowsocks"></a>Step 3: 安装shadowsocks</h2><p>ubuntu下使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get install python-pip</div><div class="line">pip install shadowsocks</div></pre></td></tr></table></figure></p>
<p>centos下使用:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install python-setuptools &amp;&amp; easy_install pip</div><div class="line">pip install shadowsocks</div></pre></td></tr></table></figure></p>
<h2 id="Step-4-修改配置文件"><a href="#Step-4-修改配置文件" class="headerlink" title="Step 4: 修改配置文件"></a>Step 4: 修改配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/shadowsocks.json</div></pre></td></tr></table></figure>
<p>内容如下</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"server"</span>:<span class="string">"0.0.0.0"</span>,</div><div class="line">    <span class="attr">"server_port"</span>:<span class="number">3389</span>,</div><div class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</div><div class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</div><div class="line">    <span class="attr">"password"</span>:<span class="string">"your_password"</span>,</div><div class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</div><div class="line">    <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</div><div class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"workers"</span>: <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Step-5-启动Shadowsocks"><a href="#Step-5-启动Shadowsocks" class="headerlink" title="Step 5: 启动Shadowsocks"></a>Step 5: 启动Shadowsocks</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssserver -c /etc/shadowsocks.json <span class="_">-d</span> start</div></pre></td></tr></table></figure>
<p>至此服务器上的shadowsocks配置完成。</p>
<h2 id="Step-6-连接shadowsocks"><a href="#Step-6-连接shadowsocks" class="headerlink" title="Step 6: 连接shadowsocks"></a>Step 6: 连接shadowsocks</h2><p>###mac<br>可以安装<a href="https://github.com/shadowsocks/shadowsocks-iOS/releases" target="_blank" rel="external">shadowsocks</a>,直接输入ip、端口及加密和密码即可。</p>
<h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>同上，安装<a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="external">shadowsocks</a></p>
<h3 id="android"><a href="#android" class="headerlink" title="android"></a>android</h3><p>参见<a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="external">shadowsocks-android</a></p>
<h3 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h3><p>app store搜索surge即可</p>
]]></content>
    
    <summary type="html">
    
      本文讲述下在ubuntu 16.01的服务器上配置shadowsocks用于访问外网。
    
    </summary>
    
      <category term="server" scheme="http://yoursite.com/categories/server/"/>
    
      <category term="shadowsocks" scheme="http://yoursite.com/categories/server/shadowsocks/"/>
    
    
      <category term="server, shadowsocks" scheme="http://yoursite.com/tags/server-shadowsocks/"/>
    
  </entry>
  
</feed>
